using PagedList;
using SIAAPI.Models.Comercial;
using SIAAPI.ViewModels.Comercial;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using System.Data.Entity;
using SIAAPI.Models.Administracion;
using SIAAPI.Models.Login;
using SIAAPI.ViewModels.Cfdi;
using CrystalDecisions.CrystalReports.Engine;
using System.IO;
using SIAAPI.ViewModels.Articulo;
using SIAAPI.Models.PlaneacionProduccion;
using SIAAPI.Models.Produccion;
using SIAAPI.Reportes;
using SIAAPI.ClasesProduccion;
using System.Text;
using FormulaSiaapi;
using Automatadll;
using System.Xml.Serialization;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Globalization;
using System.Drawing;
using SIAAPI.Controllers.Cfdi;

namespace SIAAPI.Controllers.Comercial
{
    public class EncPedidoController : Controller
    {
        private PedidoContext db = new PedidoContext();
        private ClientesContext prov = new ClientesContext();
        public ActionResult Index(string Divisa, string Status, string sortOrder, string currentFilter, string searchString, int? page, int? PageSize)
        {

 			List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int usuario = userid.Select(s => s.UserID).FirstOrDefault();

            List<UserRole> userrol = db.Database.SqlQuery<UserRole>("select * from [dbo].[UserRole] where userid='" + usuario + "'").ToList();

            bool todas = false;
            foreach (UserRole roless in userrol)
            {
                Roles rol = new RolesContext().Roless.Find(roless.RoleID);
                if(rol.ROleName == "Gerencia" || rol.ROleName == "GerenteVentas" || rol.ROleName== "Administrador" || rol.ROleName == "Sistemas" || rol.ROleName == "AdminProduccion" || rol.ROleName == "Almacenista" || rol.ROleName == "Comercial")
                {
                    todas = true;
                }
            }

            var SerLst = new List<string>();
            var SerQry = from d in db.c_Monedas
                         orderby d.IDMoneda
                         select d.ClaveMoneda;
            SerLst.Add(" ");
            SerLst.AddRange(SerQry.Distinct());
            ViewBag.Divisa = new SelectList(SerLst);

            var StaLst = new List<string>();
            var StaQry = from d in db.EncPedidos
                         orderby d.IDPedido
                         select d.Status;
            StaLst.Add(" ");
            StaLst.AddRange(StaQry.Distinct());
            ViewBag.Status = new SelectList(StaLst);

 			var elementos = (from s in db.EncPedidos
                             select s).Where(s => s.IDPedido == 0);
            if (!todas )
            {
                 elementos = (from s in db.EncPedidos
                                 select s).Where(s => s.UserID == usuario).OrderByDescending(s => s.IDPedido);
            }
            else
            {
                elementos = (from s in db.EncPedidos
                                 select s).OrderByDescending(s => s.IDPedido);
            }

            


            //elementos = elementos.OrderByDescending(s => s.IDOrdenCompra);

            var resumen = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncPedido.IDMoneda) as MonedaOrigen, (SUM(Subtotal)) as Subtotal, (SUM(IVA)) as IVA, (SUM(Total)) as Total, (SUM(Total * TipoCambio)) as TotalenPesos from EncPedido where EncPedido.Status<>'Cancelado' group by EncPedido.IDMoneda").ToList();
            ViewBag.sumatoria = resumen;
            
            if (!String.IsNullOrEmpty(searchString))
            {
                elementos = (from s in db.EncPedidos
                             select s).OrderByDescending(s => s.IDPedido);

                elementos = elementos.Where(s => s.IDPedido.ToString().Contains(searchString) || s.Clientes.Nombre.Contains(searchString)).OrderByDescending(s => s.IDPedido);

                var filtro = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncPedido.IDMoneda) as MonedaOrigen, (SUM(Subtotal)) as Subtotal, (SUM(IVA)) as IVA, (SUM(Total)) as Total, (SUM(Total * TipoCambio)) as TotalenPesos from EncPedido inner join Clientes on Clientes.IDCliente=EncPedido.IDCliente  where (CAST(EncPedido.IDPedido AS nvarchar(max))='" + searchString + "' or Clientes.Nombre='" + searchString + "') and EncPedido.Status<>'Cancelado' group by EncPedido.IDMoneda ").ToList();
                ViewBag.sumatoria = filtro;


            }
            //Filtro Divisa
            if (!String.IsNullOrEmpty(Divisa))
            {
                //elementos = (from s in db.EncPedidos
                //             select s).OrderByDescending(s => s.IDPedido);
                elementos = elementos.Where(s => s.c_Moneda.ClaveMoneda == Divisa).OrderByDescending(s => s.IDPedido);

                var divisa = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncPedido.IDMoneda) as MonedaOrigen, (SUM(Subtotal)) as Subtotal, (SUM(IVA)) as IVA, (SUM(Total)) as Total, (SUM(Total * TipoCambio)) as TotalenPesos from EncPedido inner join c_Moneda on c_Moneda.IDMoneda=EncPedido.IDMoneda  where c_Moneda.ClaveMoneda='" + Divisa + "' and EncPedido.Status<>'Cancelado' group by EncPedido.IDMoneda ").ToList();
                ViewBag.sumatoria = divisa;
                ViewBag.Divisaseleccionada = Divisa;
            }
            //Filtro Status
            if (!String.IsNullOrEmpty(Status))
            {
                //elementos = (from s in db.EncPedidos
                //             select s).OrderByDescending(s => s.IDPedido);
                elementos = elementos.Where(s => s.Status.Equals(Status)).OrderByDescending(s => s.IDPedido);

                var divisa = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncPedido.IDMoneda) as MonedaOrigen, (SUM(Subtotal)) as Subtotal, (SUM(IVA)) as IVA, (SUM(Total)) as Total, (SUM(Total * TipoCambio)) as TotalenPesos from EncPedido inner join c_Moneda on c_Moneda.IDMoneda=EncPedido.IDMoneda  where Status='" + Status + "' group by EncPedido.IDMoneda").ToList();
                ViewBag.sumatoria = divisa;
                ViewBag.Estadoseleccionado = Status;


            }

            ViewBag.CurrentSort = sortOrder;
            ViewBag.PedidoSortParm = String.IsNullOrEmpty(sortOrder) ? "Pedido" : "Pedido";
            ViewBag.ClienteSortParm = String.IsNullOrEmpty(sortOrder) ? "Cliente" : "Cliente";
            // Not sure here
            if (searchString == null)
            {
                searchString = currentFilter;
            }
            ViewBag.SearchString = searchString;
			//Paginación
            if (searchString != null)
            {
                page = 1;
            }
            else
            {
                searchString = currentFilter;
            }
            ViewBag.CurrentFilter = searchString;

            //Ordenacion

            switch (sortOrder)
            {
                case "Pedido":
                    elementos = elementos.OrderByDescending(s => s.IDPedido);
                    break;
                case "Cliente":
                    elementos = elementos.OrderByDescending(s => s.Clientes.Nombre);
                    break;
                default:
                    elementos = elementos.OrderByDescending(s => s.IDPedido);
                    break;
            }

            //Paginación
            // DROPDOWNLIST FOR UPDATING PAGE SIZE
            int count = db.EncPedidos.OrderBy(e => e.IDPedido).Count(); // Total number of elements

            // Populate DropDownList
            ViewBag.PageSize = new List<SelectListItem>()
            {
                new SelectListItem { Text = "10 ", Value = "10", Selected = true },
                new SelectListItem { Text = "25", Value = "25" },
                new SelectListItem { Text = "50", Value = "50" },
                new SelectListItem { Text = "100", Value = "100" },
                new SelectListItem { Text = "Todos", Value = count.ToString() }
             };
            int pageNumber = (page ?? 1);
            int pageSize = (PageSize ?? 10);
            ViewBag.psize = pageSize;


            return View(elementos.ToPagedList(pageNumber, pageSize));



        }
       
    
        public ActionResult Autorizar(int? id , int page=1)
        {

            EncPedido encPedido = db.EncPedidos.Find(id);
            string fecha = DateTime.Now.ToString("yyyyMMdd");

            List <User> userid;
            userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int UserID = userid.Select(s => s.UserID).FirstOrDefault();

            List<DetPedido> pedidos = db.Database.SqlQuery<DetPedido>("select DetPedido.GeneraOrdenP,DetPedido.IDRemision,DetPedido.IDPrefactura,DetPedido.IDDetPedido,DetPedido.IDPedido,DetPedido.IDArticulo,DetPedido.Caracteristica_ID,DetPedido.Costo,DetPedido.CantidadPedida,DetPedido.Cantidad,DetPedido.Descuento,DetPedido.IDAlmacen,DetPedido.Importe,DetPedido.IVA,DetPedido.ImporteIva,DetPedido.ImporteTotal,DetPedido.Suministro,DetPedido.Nota, DetPedido.IDAlmacen,DetPedido.Status,DetPedido.Ordenado,Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion from  DetPedido INNER JOIN Caracteristica ON DetPedido.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where IDPedido='" + id + "'").ToList();
           // ViewBag.pedidos = pedido;
			 int AlmacenViene = 0;

            foreach (DetPedido detalle in pedidos)
            {




                Articulo articulo = new ArticuloContext().Articulo.Find(detalle.IDArticulo);
                AlmacenViene = detalle.IDAlmacen;
                if (articulo.CtrlStock)
                {

                    


                   
                    if (articulo.esKit)
                    {
                        InventarioAlmacen invKit = new InventarioAlmacenContext().InventarioAlmacenes.ToList().Where(a => a.IDAlmacen == AlmacenViene && a.IDCaracteristica == detalle.Caracteristica_ID).FirstOrDefault();

                        decimal existenciakit = 0;

                        if (invKit != null)
                        {
                            /// kit
                            db.Database.ExecuteSqlCommand("update InventarioAlmacen set Apartado=(Apartado+" + detalle.Cantidad + "), Disponibilidad=(Disponibilidad-" + detalle.Cantidad + ") where IDArticulo= " + detalle.IDArticulo + " and IDCaracteristica=" + detalle.Caracteristica_ID + " and IDAlmacen=" + AlmacenViene + "");

                            // existenciakit = invKit.Existencia;
                        }
                        else
                        {

                            db.Database.ExecuteSqlCommand("INSERT INTO inventarioAlmacen (IDAlmacen,IDArticulo,IDCaracteristica,Existencia, PorLlegar,Apartado,Disponibilidad) values ("
                                + AlmacenViene + "," + detalle.IDArticulo + "," + detalle.Caracteristica_ID + ",0,0," + detalle.Cantidad + ",(0-" + detalle.Cantidad + "))");

                            existenciakit = 0;
                        }
                        try
                        {
                            // movimiento kit
                            Caracteristica carateristicakit = new WorkinProcessContext().Database.SqlQuery<Caracteristica>("select * from caracteristica where id=" + detalle.Caracteristica_ID).ToList().FirstOrDefault();

                            string cadenam = "INSERT INTO [dbo].[MovimientoArticulo] ([Fecha],[Id],[IDPresentacion],[Articulo_IDArticulo],[Accion],[cantidad],[Documento],[NoDocumento],[Lote],[IDAlmacen],[TipoOperacion],[acumulado],[observacion],[Hora]) VALUES ";
                            cadenam += " (getdate(), " + carateristicakit.ID + "," + carateristicakit.IDPresentacion + "," + detalle.IDArticulo + ",'Pedido',";
                            cadenam += detalle.Cantidad + ",'Pedido Kit'," + detalle.IDPedido + ",'',";
                            cadenam += detalle.IDAlmacen + ",'N/A'," + (existenciakit) + ",'',CONVERT (time, SYSDATETIMEOFFSET()))";

                            db.Database.ExecuteSqlCommand(cadenam);
                        }
                        catch (Exception err)
                        {

                        }
                        ArticuloContext dbart = new ArticuloContext();
                        List<Kit> liAC;
                        liAC = dbart.Database.SqlQuery<Kit>("select * from [dbo].[Kit] where idarticulo=" + articulo.IDArticulo).ToList();

                        ViewBag.articulos = liAC;


                        foreach (Kit c in liAC)
                        {
                            Articulo articulocom = new ArticuloContext().Articulo.Find(c.IDArticuloComp);
                            if (articulocom.CtrlStock)
                            {
                                decimal existencia = 0;
                                InventarioAlmacen inv = new InventarioAlmacenContext().InventarioAlmacenes.ToList().Where(a => a.IDAlmacen == AlmacenViene && a.IDCaracteristica == c.IDCaracteristica).FirstOrDefault();
                                
                                decimal cantidad = detalle.Cantidad * c.Cantidad;
                                if (inv != null)
                                {
                                    // componente kit
                                    db.Database.ExecuteSqlCommand("update InventarioAlmacen set Apartado=(Apartado+" + cantidad + "), Disponibilidad=(Disponibilidad-" + cantidad + ") where IDArticulo= " + c.IDArticuloComp + " and IDCaracteristica=" + c.IDCaracteristica + " and IDAlmacen=" + AlmacenViene + "");
                                  
                                    existencia = inv.Existencia;
                                }
                                else
                                {
                                    db.Database.ExecuteSqlCommand("INSERT INTO inventarioAlmacen (IDAlmacen,IDArticulo,IDCaracteristica,Existencia, PorLlegar,Apartado,Disponibilidad) values ("
                                        + AlmacenViene + "," + c.IDArticuloComp + "," + c.IDCaracteristica + ",0,0," + cantidad + ",(0-" + cantidad + "))");

                                   
                                    existencia = 0;
                                }

                                Caracteristica carateristica = new WorkinProcessContext().Database.SqlQuery<Caracteristica>("select * from caracteristica where id=" + c.IDCaracteristica).ToList().FirstOrDefault();
                                try
                                {
                                   
                                    string cadenam = "INSERT INTO [dbo].[MovimientoArticulo] ([Fecha],[Id],[IDPresentacion],[Articulo_IDArticulo],[Accion],[cantidad],[Documento],[NoDocumento],[Lote],[IDAlmacen],[TipoOperacion],[acumulado],[observacion],[Hora]) VALUES ";
                                    cadenam += " (getdate(), " + carateristica.ID + "," + carateristica.IDPresentacion + "," + c.IDArticuloComp + ",'Pedido',";
                                    cadenam += cantidad + ",'Pedido '," + detalle.IDPedido + ",'',";
                                    cadenam += detalle.IDAlmacen + ",'N/A'," + (existencia) + ",'',CONVERT (time, SYSDATETIMEOFFSET()))";

                                    db.Database.ExecuteSqlCommand(cadenam);
                                }
                                catch (Exception err)
                                {

                                }


                               
                            }
                            


                        }

                    }
                    else
                    {
                        

                        decimal existencia = 0;
                        InventarioAlmacen inv = new InventarioAlmacenContext().InventarioAlmacenes.ToList().Where(s => s.IDAlmacen == AlmacenViene && s.IDCaracteristica == detalle.Caracteristica_ID).FirstOrDefault();

                        if (inv != null)
                        {
                            db.Database.ExecuteSqlCommand("update InventarioAlmacen set Apartado=(Apartado+" + detalle.Cantidad + "), Disponibilidad=(Disponibilidad-" + detalle.Cantidad + ") where IDArticulo= " + detalle.IDArticulo + " and IDCaracteristica=" + detalle.Caracteristica_ID + " and IDAlmacen=" + AlmacenViene + "");

                            existencia = inv.Existencia;
                        }
                        else
                        {
                            db.Database.ExecuteSqlCommand("INSERT INTO inventarioAlmacen (IDAlmacen,IDArticulo,IDCaracteristica,Existencia, PorLlegar,Apartado,Disponibilidad) values ("
                                + detalle.IDAlmacen + "," + detalle.IDArticulo + "," + detalle.Caracteristica_ID + ",0,0," + detalle.Cantidad + ",(0-" + detalle.Cantidad + "))");
                            existencia = 0;
                        }



                        Caracteristica carateristica = new WorkinProcessContext().Database.SqlQuery<Caracteristica>("select * from caracteristica where id=" + detalle.Caracteristica_ID).ToList().FirstOrDefault();
                        try
                        {
                            string cadenam = "INSERT INTO [dbo].[MovimientoArticulo] ([Fecha],[Id],[IDPresentacion],[Articulo_IDArticulo],[Accion],[cantidad],[Documento],[NoDocumento],[Lote],[IDAlmacen],[TipoOperacion],[acumulado],[observacion],[Hora]) VALUES ";
                            cadenam += " (getdate(), " + carateristica.ID + "," + carateristica.IDPresentacion + "," + detalle.IDArticulo + ",'Pedido',";
                            cadenam += detalle.Cantidad + ",'Pedido '," + detalle.IDPedido + ",'',";
                            cadenam += detalle.IDAlmacen + ",'N/A'," + (existencia) + ",'',CONVERT (time, SYSDATETIMEOFFSET()))";

                            db.Database.ExecuteSqlCommand(cadenam);
                        }
                        catch (Exception err)
                        {

                        }
                    }
                    
                }

                //  db.Database.ExecuteSqlCommand("exec dbo.MovArt '"+ fecha + "'," + detalle.Caracteristica_ID + ",'PedVta'," + detalle.Cantidad + ",'Pedido'," + id + ",0,'" + detalle.IDAlmacen + "','" + detalle.Nota + "',0");
                if (articulo.esKit)
                {
                    ArticuloContext dbart = new ArticuloContext();
                    List<Kit> liAC;
                    liAC = dbart.Database.SqlQuery<Kit>("select * from [dbo].[Kit] where idarticulo=" + articulo.IDArticulo).ToList();
                    foreach (Kit kitd in liAC)
                    {
                        Articulo articulok = new ArticuloContext().Articulo.Find(kitd.IDArticuloComp);
                        Caracteristica carateristica = new ArticuloContext().Database.SqlQuery<Caracteristica>("select * from caracteristica where id=" + kitd.IDCaracteristica).ToList().FirstOrDefault();
                        if (!articulok.GeneraOrden)
                        {
                            if (articulok.CtrlStock)
                            {
                               

                                decimal cantidadk = kitd.Cantidad * detalle.Cantidad;
                                string costocad = "(select (dbo.GetCosto(" + articulok.IDArticulo + ", " + cantidadk + "))  *(dbo. GetTipocambio('" + fecha + "', " + articulok.IDMoneda + ", " + encPedido.IDMoneda + ")) as Dato)";
                                string costo = db.Database.SqlQuery<ClsDatoDecimal>(costocad).ToList().FirstOrDefault().Dato.ToString();
                                string importecosto = "((" + costo + ") * " + cantidadk + ")";
                                string importeivacosto = importecosto + "*(" + SIAAPI.Properties.Settings.Default.ValorIVA + ")";
                                string importetotalcosto = "(" + importecosto + ")" + "+(" + importeivacosto + ")";
                                string cadenac = "INSERT INTO DetSolicitud([IDArticulo], [Caracteristica_ID],Documento,Numero,[Cantidad] ,[Costo] ,[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Requerido],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion]) values (" + articulok.IDArticulo + "," + carateristica.ID + ",'Pedido'," + encPedido.IDPedido + "," + cantidadk + "," + costo + "," + cantidadk + ",'0', " + importecosto + " ,'true'," + importeivacosto + "," + importetotalcosto + ",'" + detalle.Nota + "','0'," + detalle.IDAlmacen + ",0,'Solicitado','" + carateristica.Presentacion + "','" + carateristica.jsonPresentacion + "');";
                                db.Database.ExecuteSqlCommand(cadenac);
                            }
                        }
                        

                    }

                }


                if (!articulo.GeneraOrden && !articulo.esKit)
                {
                    

                    
                   if (articulo.CtrlStock)
                        {
                            string costocad = "(select (dbo.GetCosto(" + detalle.IDArticulo + ", " + detalle.Cantidad + "))  *(dbo. GetTipocambio('" + fecha + "', " + articulo.IDMoneda + ", " + encPedido.IDMoneda + ")) as Dato)";
                            string costo = db.Database.SqlQuery<ClsDatoDecimal>(costocad).ToList().FirstOrDefault().Dato.ToString();
                            string importecosto = "((" + costo + ") * " + detalle.Cantidad + ")";
                            string importeivacosto = importecosto + "*(" + SIAAPI.Properties.Settings.Default.ValorIVA + ")";
                            string importetotalcosto = "(" + importecosto + ")" + "+(" + importeivacosto + ")";
                            string cadenac = "INSERT INTO DetSolicitud([IDArticulo], [Caracteristica_ID],Documento,Numero,[Cantidad] ,[Costo] ,[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Requerido],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion]) values (" + detalle.IDArticulo + "," + detalle.Caracteristica_ID + ",'Pedido'," + encPedido.IDPedido + "," + detalle.Cantidad + "," + costo + "," + detalle.Cantidad + ",'0', " + importecosto + " ,'true'," + importeivacosto + "," + importetotalcosto + ",'" + detalle.Nota + "','0'," + detalle.IDAlmacen + ",0,'Solicitado','" + detalle.Presentacion + "','" + detalle.jsonPresentacion + "');";
                            db.Database.ExecuteSqlCommand(cadenac);
                        }
                       
                    
                    
                }





            }

            db.Database.ExecuteSqlCommand("update [dbo].[EncPedido] set [Status]='Activo' where [IDPedido]='" + id + "'");
            db.Database.ExecuteSqlCommand("update [dbo].[DetPedido] set [Status]='Activo' where [IDPedido]='" + id + "'");
            db.Database.ExecuteSqlCommand("insert into [dbo].[MovAutorizacion] ([Documento],[IDDocumento],[Fecha],[UserID]) values('Pedido','" + encPedido.IDPedido + "','" + fecha + "','" + UserID + "')");
           
            return RedirectToAction("Index", new { page = page });
        }

        public ActionResult Details(int? id)
        {
            
			System.Web.HttpContext.Current.Session["idpedido"] = id;

            List<VDetPedido> pedido = db.Database.SqlQuery<VDetPedido>("select DetPedido.IDDetPedido, DetPedido.IDArticulo, DetPedido.IDAlmacen,Articulo.GeneraOrden,Articulo.Cref as Cref,DetPedido.Suministro,DetPedido.GeneraOrdenP,DetPedido.IDRemision,DetPedido.IDPrefactura,DetPedido.Status,Articulo.MinimoVenta,Caracteristica.ID as Caracteristica_ID,DetPedido.IDDetExterna,DetPedido.IDPedido,Articulo.Descripcion as Articulo,DetPedido.Cantidad,DetPedido.Costo,DetPedido.CantidadPedida,DetPedido.Descuento,DetPedido.Importe,DetPedido.IVA,DetPedido.ImporteIva,DetPedido.ImporteTotal, DetPedido.Nota,DetPedido.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion from  DetPedido INNER JOIN Caracteristica ON DetPedido.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where IDPedido='" + id + "'").ToList();

            ViewBag.req = pedido;

            var filtro = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncPedido.IDMoneda) as MonedaOrigen, (SUM(Subtotal)) as Subtotal, (SUM(IVA)) as IVA, (SUM(Total)) as Total, (SUM(Total * TipoCambio)) as TotalenPesos from EncPedido inner join Clientes on Clientes.IDCliente=EncPedido.IDCliente where EncPedido.IDPedido='" + id + "' group by EncPedido.IDMoneda ").ToList();
            ViewBag.sumatoria = filtro;

            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            EncPedido encPedido = db.EncPedidos.Find(id);
            if (encPedido == null)
            {
                return HttpNotFound();
            }
            return View(encPedido);
        }
 		public ActionResult OrdenesAGenerar(int id)
        {
            List<VDetPedido> pedido = db.Database.SqlQuery<VDetPedido>("select DetPedido.IDDetPedido, DetPedido.IDArticulo, DetPedido.IDAlmacen,Articulo.GeneraOrden,Articulo.Cref as Cref,DetPedido.Suministro,DetPedido.GeneraOrdenP,DetPedido.IDRemision,DetPedido.IDPrefactura,DetPedido.Status,Articulo.MinimoVenta,Caracteristica.ID as Caracteristica_ID,DetPedido.IDDetExterna,DetPedido.IDPedido,Articulo.Descripcion as Articulo,DetPedido.Cantidad,DetPedido.Costo,DetPedido.CantidadPedida,DetPedido.Descuento,DetPedido.Importe,DetPedido.IVA,DetPedido.ImporteIva,DetPedido.ImporteTotal, DetPedido.Nota,DetPedido.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion from  DetPedido INNER JOIN Caracteristica ON DetPedido.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where IDPedido='" + id + "'").ToList();

            ViewBag.req = pedido;
            return View();
        }


        public ActionResult GeneraOrden(FormCollection collection)
        {

	
            int idpedido = int.Parse(System.Web.HttpContext.Current.Session["idpedido"].ToString());
			var datosOrden = new List<string>();
            datosOrden.Add(collection.Get("Cantidad"));
            datosOrden.Add(collection.Get("iddetpedido"));
            datosOrden.Add(collection.Get("idarticulo"));
            datosOrden.Add(collection.Get("idcotizacionarticulo"));
           

            string[] valoresdecantidad = datosOrden[0].Split(',');
            string[] valoresiddetpedido = datosOrden[1].Split(',');
            string[] valoresidarticulo = datosOrden[2].Split(',');
            string[] valoresidcotizacionarticulo = datosOrden[3].Split(',');

            int renglones = valoresdecantidad.Length;

            for (int con = 0; con < renglones; con++)
            {
                //int  cuenta = datosOrden.Count();  // cuenta es el numero de atributos que manda el formcoleccion este no te sirve
                // para reccorres los valores pues siempre seran 3, ahora sabiendo que son 3 lo que cambia es la longitud de valores que tiene cada uno
                // datos orden velo como  las columnas y ahora valos por los renlones.

                ///desereakizarXMLCOTIZACION
                ///


              


                decimal cantidad = decimal.Parse(valoresdecantidad[con]); //
                int id = int.Parse(valoresiddetpedido[con]);
                int idarticulocomp = int.Parse(valoresidarticulo[con]);

                int idhe = 0;
                List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
                int usuario = userid.Select(s => s.UserID).FirstOrDefault();
                DetPedido detpedido = db.DetPedido.Find(id);
                EncPedido pedido = db.EncPedidos.Find(detpedido.IDPedido);
                VCaracteristicaContext presentacionBase = new VCaracteristicaContext();
                Articulo articulos = new ArticuloContext().Articulo.Find(detpedido.IDArticulo);
                if (articulos.esKit)
                {
                    ArticuloContext dbart = new ArticuloContext();
                    List<Kit> liAC;
                    liAC = dbart.Database.SqlQuery<Kit>("select * from [dbo].[Kit] where idarticulo=" + articulos.IDArticulo + " and IDArticuloComp=" + idarticulocomp).ToList();

                    ViewBag.articulos = liAC;


                    foreach (Kit c in ViewBag.articulos)
                    {
                      Articulo articulo = new ArticuloContext().Articulo.Find(c.IDArticuloComp);

                        ViewBag.verGeneraOrden = articulo;
                        if (articulo.GeneraOrden)
                        {
                            ViewBag.ArticuloComKit = c.IDCaracteristica;
                        }
                    }


                    VCaracteristica presentacion1 = presentacionBase.VCaracteristica.Find(ViewBag.ArticuloComKit);
                    ClsDatoEntero dato1 = new HEspecificacionEContext().Database.SqlQuery<ClsDatoEntero>("select IDCotizacion as Dato from Caracteristica where id=" + presentacion1.ID ).FirstOrDefault();
                    idhe = dato1.Dato;

                    if (idhe == 0)
                    {
                       return Json(new { errorMessage = "El producto no  ha sido cotizado " + articulos.Cref + " No de presentacion " + presentacion1.IDPresentacion });
                    }
                }

                else
                {
                    VCaracteristica presentacion = presentacionBase.VCaracteristica.Find(detpedido.Caracteristica_ID);

                    ClsDatoEntero dato2 = new HEspecificacionEContext().Database.SqlQuery<ClsDatoEntero>("select IDCotizacion as Dato from Caracteristica where id=" + presentacion.ID).FirstOrDefault();

                    idhe = dato2.Dato;
                    if (idhe == 0)
                    {
                         return Json(new { errorMessage = "El producto no  ha sido cotizado " + articulos.Cref +" No de presentacion " + presentacion.IDPresentacion  });
                    }
                }

                try
                {
                    //HEspecificacionE hespecificacion = new HEspecificacionEContext().HEspecificacionesE.Find(idhe);
                  
                    automata Automata;

                    XmlSerializer serializer = new XmlSerializer(typeof(automata));

                    string path = Path.Combine(Server.MapPath("~/Automatas/Ordenes.Xml"));


                    using (TextReader reader = new StreamReader(path))
                    {
                        serializer = new XmlSerializer(typeof(automata));
                        Automata = (automata)serializer.Deserialize(reader);
                    }

                    Automata.establecerestadoinicial();

                    string estadoinicial = Automata.Estadoactual.Nombre;


                    bool modeloTermoEncogible = false;
                    modeloTermoEncogible = siTermoencongible(int.Parse(valoresidcotizacionarticulo[con]));
                    int ModelosDeProduccion_IDModeloProduccion = 0;
                    if (modeloTermoEncogible)
                    {
                        ModelosDeProduccion_IDModeloProduccion = 8;
                    }
                    else
                    {
                        ModelosDeProduccion_IDModeloProduccion = 4;
                    }

                    int idprocesoactual = db.Database.SqlQuery<int>("select Proceso_IDProceso from ModeloProceso where ModelosDeProduccion_IDModeloProduccion='" + ModelosDeProduccion_IDModeloProduccion + "' and orden=1").FirstOrDefault();
                    string fecharequiere = pedido.FechaRequiere.ToString("yyyy/MM/dd");
                    string fecharegistro = pedido.Fecha.ToString("yyyy/MM/dd");
         
                    ArticulosProduccionContext dba = new ArticulosProduccionContext();
                    Articulo articuloaproducion = new ArticuloContext().Articulo.Find(detpedido.IDArticulo);
                    
                    int idordenproduccion = 0;
                    string fecha = "";

                    if (articulos.esKit)
                    {
                        ArticuloContext dbart = new ArticuloContext();
                        string cadenaki = "select * from [dbo].[Kit] where idarticulo=" + articulos.IDArticulo + " and IDArticuloComp=" + idarticulocomp;
                        List<Kit> liAC;
                        liAC = dbart.Database.SqlQuery<Kit>(cadenaki).ToList();

                        ViewBag.articulos = liAC;

                        foreach (Kit comp in ViewBag.articulos)
                        {
                            Articulo articulo = new ArticuloContext().Articulo.Find(comp.IDArticuloComp);
                            VCaracteristica presentacion1 = presentacionBase.VCaracteristica.Find(comp.IDCaracteristica);
                            db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[OrdenProduccion] ([IDModeloProduccion],[IDCliente],[IDArticulo],[IDCaracteristica],[Descripcion],[Presentacion],[Indicaciones],[FechaCompromiso],[FechaInicio],[FechaProgramada],[FechaRealdeInicio],[FechaRealdeTerminacion],[Cantidad],[IDPedido],[IDDetPedido],[Prioridad],[EstadoOrden],[UserID],[Liberar],idhe) VALUES(" + ModelosDeProduccion_IDModeloProduccion + ",'" + pedido.IDCliente + "','" + articulo.IDArticulo + "','" + comp.IDCaracteristica + "','" + articulo.Descripcion + "','" + presentacion1.Presentacion + "','" + detpedido.Nota + "','" + fecharequiere + "','" + fecharegistro + "',null,null,null,'" + cantidad + "','" + detpedido.IDPedido + "','" + id + "',0,'" + estadoinicial + "'," + usuario + ",'Activo'," + idhe + ")");
                            idordenproduccion = db.Database.SqlQuery<int>("select max(IDOrden) from OrdenProduccion").FirstOrDefault();
                            fecha = DateTime.Now.ToString("yyyy-MM-dd");
                           
                            ClsDatoEntero dato = new VistaModeloProcesoContext().Database.SqlQuery<ClsDatoEntero>("select idinventarioalmacen as Dato from dbo.InventarioAlmacen WHERE IDAlmacen= " + detpedido.IDAlmacen + "  and IDCaracteristica =" + detpedido.Caracteristica_ID).FirstOrDefault();
                            if (dato != null)
                            {
                                new VistaModeloProcesoContext().Database.ExecuteSqlCommand("update inventarioalmacen set porllegar=porllegar +" + cantidad + " WHERE IDAlmacen= " + detpedido.IDAlmacen + "  and IDCaracteristica =" + detpedido.Caracteristica_ID);

                            }
                            else
                            {
                                new VistaModeloProcesoContext().Database.ExecuteSqlCommand("insert into inventarioalmacen  (IDAlmacen,IDArticulo,IDCaracteristica,Existencia, PorLlegar,Apartado,Disponibilidad) values ( +" + detpedido.IDAlmacen + "," + detpedido.IDArticulo + "," + detpedido.Caracteristica_ID + ",0," + cantidad + ",0,0)");
                            }



                            var lista1 = new VistaModeloProcesoContext().Database.SqlQuery<VistaModeloProceso>("Select * from [VModeloProceso] where idModeloProduccion=" + ModelosDeProduccion_IDModeloProduccion + " order by orden").ToList();
                            ViewBag.listaprocesos = lista1;

                         

                            for (int i = 0; i < lista1.Count(); i++)
                            {

                                db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[OrdenProduccionDetalle] ([IDOrden],[IDProceso],[EstadoProceso]) VALUES ('" + idordenproduccion + "','" + ViewBag.listaprocesos[i].IDProceso + "','Conflicto')");
                             }

                            decimal tc = db.Database.SqlQuery<ClsDatoDecimal>("select dbo.GetTipocambio(GETDATE(),(select idMoneda from C_MONEDA WHERE clavemoneda='USD'),(select idMoneda from C_MONEDA WHERE clavemoneda='MXN')  )  as Dato").ToList()[0].Dato;

                            string queonda = CrearOrden(idhe, cantidad, idordenproduccion, tc, detpedido.Articulo.IDMoneda, ModelosDeProduccion_IDModeloProduccion);



                            //List<DocumentoE> documentos = db.Database.SqlQuery<DocumentoE>("select * from DocumentoE where IDHE='" + idhe + "'").ToList();
                            //ViewBag.Documentos = documentos;

                            //for (int i = 0; i < documentos.Count; i++)
                            //{
                            //    db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[DocumentoProduccion] ([IDOrden],[Version],[IDProceso],[Descripcion],[Planeacion],[Nombre]) VALUES('" + idordenproduccion + "','" + ViewBag.Documentos[i].Version + "','" + ViewBag.Documentos[i].IDProceso + "','" + ViewBag.Documentos[i].Descripcion + "','" + ViewBag.Documentos[i].Planeacion + "','" + ViewBag.Documentos[i].Nombre + "')");

                            //}


                        }

                    }
                    else
                    {
                        string cadenaorden = "INSERT INTO [dbo].[OrdenProduccion] ([IDModeloProduccion],[IDCliente],[IDArticulo],[IDCaracteristica],[Descripcion],[Presentacion],[Indicaciones],[FechaCompromiso],[FechaInicio],[FechaProgramada],[FechaRealdeInicio],[FechaRealdeTerminacion],[Cantidad],[IDPedido],[IDDetPedido],[Prioridad],[EstadoOrden],[UserID],[Liberar],idhe) VALUES(" + 
                             ModelosDeProduccion_IDModeloProduccion + ",'" + pedido.IDCliente + "','" + detpedido.IDArticulo + "','" + detpedido.Caracteristica_ID + "','" + articuloaproducion.Descripcion + "','" + detpedido.Presentacion + "','" + detpedido.Nota + "','" + fecharequiere + "','" + fecharegistro + "',null,null,null,'" + cantidad + "','" + detpedido.IDPedido + "','" + id + "',0,'" + estadoinicial + "'," + usuario + ",'Activo'," + idhe + ")";
                        db.Database.ExecuteSqlCommand(cadenaorden);
                        idordenproduccion = db.Database.SqlQuery<int>("select max(IDOrden) from OrdenProduccion").FirstOrDefault();
                        fecha = DateTime.Now.ToString("yyyy-MM-dd");

                        ClsDatoEntero dato = new VistaModeloProcesoContext().Database.SqlQuery<ClsDatoEntero>("select idinventarioalmacen as Dato from dbo.InventarioAlmacen WHERE IDAlmacen= " + detpedido.IDAlmacen + "  and IDCaracteristica =" + detpedido.Caracteristica_ID).FirstOrDefault();
                        if (dato!=null)
                        {
                            new VistaModeloProcesoContext().Database.ExecuteSqlCommand("update inventarioalmacen set porllegar=porllegar +" + cantidad + " WHERE IDAlmacen= " + detpedido.IDAlmacen + "  and IDCaracteristica =" + detpedido.Caracteristica_ID);

                        }
                        else
                        {
                            new VistaModeloProcesoContext().Database.ExecuteSqlCommand("insert into inventarioalmacen  (IDAlmacen,IDArticulo,IDCaracteristica,Existencia, PorLlegar,Apartado,Disponibilidad) values ( +" + detpedido.IDAlmacen  + ","+ detpedido.IDArticulo + "," + detpedido.Caracteristica_ID+",0,"+cantidad+",0,0)");
                        }

                       
                        var lista = new VistaModeloProcesoContext().Database.SqlQuery<VistaModeloProceso>("Select * from [VModeloProceso] where idModeloProduccion=" + ModelosDeProduccion_IDModeloProduccion + " order by orden").ToList();
                        ViewBag.listaprocesos = lista;



                        for (int i = 0; i < lista.Count(); i++)
                        {

                            db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[OrdenProduccionDetalle] ([IDOrden],[IDProceso],[EstadoProceso]) VALUES ('" + idordenproduccion + "','" + ViewBag.listaprocesos[i].IDProceso + "','Conflicto')");
                      
                        }

                        decimal tc = db.Database.SqlQuery<ClsDatoDecimal>("select dbo.GetTipocambio(GETDATE(),(select idMoneda from C_MONEDA WHERE clavemoneda='USD'),(select idMoneda from C_MONEDA WHERE clavemoneda='MXN')  )  as Dato").ToList()[0].Dato;

                        string queonda = CrearOrden(idhe, cantidad, idordenproduccion, tc, detpedido.Articulo.IDMoneda, ModelosDeProduccion_IDModeloProduccion);

                        //List<DocumentoE> documentos = db.Database.SqlQuery<DocumentoE>("select * from DocumentoE where IDHE='" + idhe + "'").ToList();
                        //ViewBag.Documentos = documentos;

                        //for (int i = 0; i < documentos.Count; i++)
                        //{
                        //    db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[DocumentoProduccion] ([IDOrden],[Version],[IDProceso],[Descripcion],[Planeacion],[Nombre]) VALUES('" + idordenproduccion + "','" + ViewBag.Documentos[i].Version + "','" + ViewBag.Documentos[i].IDProceso + "','" + ViewBag.Documentos[i].Descripcion + "','" + ViewBag.Documentos[i].Planeacion + "','" + ViewBag.Documentos[i].Nombre + "')");

                        //}

                    }

                }
                catch (Exception err)
                {
                    string mensaje = err.Message;
                    return Json(new { errorMessage = "El producto tuvo un error " + articulos.Cref + " ->" +err.Message});
                }
            }
            return RedirectToAction("Details", new { id = idpedido });

        }
      



 public ActionResult Cancelar(int? id)
        {
 try
            {
                List<OrdenProduccion> op = new OrdenProduccionContext().OrdenesProduccion.Where(s => s.IDPedido == id && s.EstadoOrden != "Cancelada").ToList();

                if (op.Count>0)
                {
                    throw new Exception("Hay ordenes de producción activas, por lo que no es posible cancelar el pedido");
                }

            
                List<DetSolicitud> listasolicitudes = new ArticuloContext().Database.SqlQuery<DetSolicitud>("select * from detsolicitud where Documento='Pedido' and numero=" + id + " and status='Requerido' ").ToList();
                if (listasolicitudes.Count>0)
                {
                    throw new Exception("Hay requisiciones de compra activas, por lo que no es posible cancelar el pedido");
                }


                string fecha = DateTime.Now.ToString("yyyyMMdd");

                EncPedido encPedido = db.EncPedidos.Find(id);
                List<VDetPedido> pedido = db.Database.SqlQuery<VDetPedido>("select DetPedido.Status,Articulo.MinimoVenta,Caracteristica.ID as Caracteristica_ID,DetPedido.IDDetExterna,DetPedido.IDPedido,Articulo.Descripcion as Articulo,DetPedido.Cantidad,DetPedido.Costo,DetPedido.CantidadPedida,DetPedido.Descuento,DetPedido.Importe,DetPedido.IVA,DetPedido.ImporteIva,DetPedido.ImporteTotal, DetPedido.Nota,DetPedido.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion from  DetPedido INNER JOIN Caracteristica ON DetPedido.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where IDPedido='" + id + "' and Status='Activo'").ToList();

                ViewBag.ordenes = pedido;
                for (int i = 0; i < pedido.Count(); i++)
                {
                    db.Database.ExecuteSqlCommand("exec dbo.CancelaMovArt'" + fecha + "'," + ViewBag.ordenes[i].Caracteristica_ID + ",'CanPedVta'," + ViewBag.ordenes[i].Cantidad + ",'Pedido'," + id + ",0,'" + encPedido.IDAlmacen + "','" + ViewBag.ordenes[i].Nota + "',1");
                }

                db.Database.ExecuteSqlCommand("update EncPedido set [Status]='Cancelado' where IDPedido='" + id + "'  and Status='Activo'");
                db.Database.ExecuteSqlCommand("update DetPedido set [Status]='Cancelado'  where IDPedido='" + id + "'  and Status='Activo'");
                db.Database.ExecuteSqlCommand("delete detsolicitud   where numero=" + id + "  and documento='Pedido'");
            }
            catch(Exception err)
            {
                return Content(err.Message);
            }
            return RedirectToAction("Index");
        }

        [HttpPost]

        public ActionResult MonedaC(int? idmoneda)
        {
            List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int usuario = userid.Select(s => s.UserID).FirstOrDefault();

            List<VCarrito> cotizacion = db.Database.SqlQuery<VCarrito>("select (Carrito.Precio * (select dbo.GetTipocambio(GETDATE(),Carrito.IDMoneda,(select IDMoneda from c_Moneda WHERE ClaveMoneda='MXN')))) * Carrito.Cantidad as preciomex,Articulo.MinimoCompra,Articulo.MinimoVenta,c_ClaveUnidad.Nombre as Unidad,Carrito.IDCarrito,Carrito.usuario,Carrito.IDCaracteristica,Carrito.Precio,Carrito.Cantidad,Caracteristica.Presentacion as Presentacion,Articulo.Descripcion,Articulo.IDArticulo,c_Moneda.Descripcion as Moneda,c_Moneda.IDMoneda as IDMoneda,Carrito.Precio * Carrito.Cantidad as Importe, Carrito.Nota from  Carrito INNER JOIN Caracteristica ON Carrito.IDCaracteristica= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo INNER JOIN c_Moneda ON c_Moneda.IDMoneda = Carrito.IDMoneda INNER JOIN c_ClaveUnidad ON c_ClaveUnidad.IDClaveUnidad = Articulo.IDClaveUnidad where usuario='" + usuario + "'").ToList();

            ViewBag.carrito = cotizacion;


            string fecha = DateTime.Now.ToString("yyyy/MM/dd");
            for (int i = 0; i < cotizacion.Count(); i++)
            {
                int monedaorigen = ViewBag.carrito[i].IDMoneda;
                VCambio cambio = db.Database.SqlQuery<VCambio>("select dbo.GetTipocambio('" + fecha + "'," + monedaorigen + "," + idmoneda + ") as TC").ToList()[0];
                decimal Precio = ViewBag.carrito[i].Precio * cambio.TC;

                db.Database.ExecuteSqlCommand("update [dbo].[Carrito] set  [IDMoneda]=" + idmoneda + ", [Precio]=" + Precio + "  where IDCarrito =" + ViewBag.carrito[i].IDCarrito + " and usuario=" + usuario + "");

            }
            return Json(true);

        }


        public ActionResult Create()
        {

           ViewBag.idalma = 2;
           
            List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int usuario = userid.Select(s => s.UserID).FirstOrDefault();


            List<int> carrito = new CarritoContext().Database.SqlQuery<int>("Select IDMoneda from Carrito where usuario="+ usuario +" group by IDMoneda" ).ToList();
            if (carrito.Count>1 )
            {
                 string Mensajedeerror = "No Puedes crear un pedido de dos monedas diferentes";
                return RedirectToAction("Index", "Carrito", new { Mensaje = Mensajedeerror });
            }



            CarritoContext car = new CarritoContext();
            ClsDatoEntero cambio = db.Database.SqlQuery<ClsDatoEntero>("select distinct IDCliente as Dato from Carrito where usuario=" + usuario + "").ToList()[0];



            List<SelectListItem> li = new List<SelectListItem>();
            Clientes mm = prov.Clientes.Find(cambio.Dato);
            li.Add(new SelectListItem { Text = mm.Nombre, Value = mm.IDCliente.ToString() });
            ViewBag.cliente = li;

            Clientes clientes = prov.Clientes.Find(cambio.Dato);
            List<SelectListItem> moneda = new List<SelectListItem>();

            ClsDatoEntero monedacarrito = db.Database.SqlQuery<ClsDatoEntero>("select distinct IDMoneda as Dato from Carrito where usuario=" + usuario + "").ToList()[0];
            c_Moneda monedap = prov.c_Monedas.Find(monedacarrito.Dato);
            moneda.Add(new SelectListItem { Text = monedap.Descripcion, Value = monedap.IDMoneda.ToString() });
            moneda.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todosmoneda = prov.c_Monedas.ToList();
            if (todosmoneda != null)
            {
                foreach (var y in todosmoneda)
                {
                    moneda.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDMoneda.ToString() });
                }
            }

            ViewBag.moneda = moneda;

            List<SelectListItem> metodo = new List<SelectListItem>();
            c_MetodoPago metodop = prov.c_MetodoPagos.Find(clientes.IDMetodoPago);
            metodo.Add(new SelectListItem { Text = metodop.Descripcion, Value = metodop.IDMetodoPago.ToString() });
            metodo.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todosmetodo = prov.c_MetodoPagos.ToList();
            if (todosmetodo != null)
            {
                foreach (var y in todosmetodo)
                {
                    metodo.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDMetodoPago.ToString() });
                }
            }

            ViewBag.metodo = metodo;

            List<SelectListItem> forma = new List<SelectListItem>();
            c_FormaPago formap = prov.c_FormaPagos.Find(clientes.IDFormapago);
            forma.Add(new SelectListItem { Text = formap.Descripcion, Value = formap.IDFormaPago.ToString() });
            forma.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todosforma = prov.c_FormaPagos.ToList();
            if (todosforma != null)
            {
                foreach (var y in todosforma)
                {
                    forma.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDFormaPago.ToString() });
                }
            }

            ViewBag.forma = forma;

            List<SelectListItem> condiciones = new List<SelectListItem>();
            CondicionesPago condicionesp = prov.CondicionesPagos.Find(clientes.IDCondicionesPago);
            condiciones.Add(new SelectListItem { Text = condicionesp.Descripcion, Value = condicionesp.IDCondicionesPago.ToString() });
            condiciones.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todoscondiciones = prov.CondicionesPagos.ToList();
            if (todoscondiciones != null)
            {
                foreach (var y in todoscondiciones)
                {
                    condiciones.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDCondicionesPago.ToString() });
                }
            }

            ViewBag.condiciones = condiciones;

            List<SelectListItem> vendedor = new List<SelectListItem>();
            Vendedor vendedorp = prov.Vendedores.Find(clientes.IDVendedor);
            vendedor.Add(new SelectListItem { Text = vendedorp.Nombre, Value = vendedorp.IDVendedor.ToString() });
            vendedor.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todosvendedor = prov.Vendedores.ToList();
            if (todosvendedor != null)
            {
                foreach (var y in todosvendedor)
                {
                    vendedor.Add(new SelectListItem { Text = y.Nombre, Value = y.IDVendedor.ToString() });
                }
            }

            ViewBag.vendedor = vendedor;


            List<SelectListItem> entrega = new List<SelectListItem>();
            List<VEntrega> entregasall = db.Database.SqlQuery<VEntrega>("select en.IDEntrega,en.IDCliente,en.CalleEntrega,en.NumExtEntrega,ISNULL(en.NumIntEntrega,0),en.ColoniaEntrega,en.MunicipioEntrega,en.CPEntrega,en.ObservacionEntrega,es.Estado from dbo.Entrega as en inner join Estados as es on es.IDEstado=en.IDEstado where IDCliente='" + cambio.Dato + "'").ToList();

            entrega.Add(new SelectListItem { Text = clientes.Calle + " " + clientes.NumExt + " " + clientes.NumInt + " " + clientes.Colonia, Value = clientes.Calle + " " + clientes.NumExt + " " + clientes.NumInt + " " + clientes.Colonia + " " + clientes.Municipio });
            entrega.Add(new SelectListItem { Text = "El Cliente Recoge", Value = "El Cliente Recoge" });   
            entrega.Add(new SelectListItem { Text = "Enviar por paqueteria", Value = "Enviar por paqueteria" });
            entrega.Add(new SelectListItem { Text = "Ocurre: " +  clientes.Municipio , Value = "Ocurre: " + clientes.Municipio });

            foreach( VEntrega entregax in entregasall)
            {
                entrega.Add(new SelectListItem { Text = "Calle: " + entregax.CalleEntrega + " " + "No. Exterior: " + entregax.NumExtEntrega + " " + "No. Interior: " + entregax.NumIntentrega + " " + "Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " ", Value = "Calle: " + entregax.CalleEntrega + " " + "No. Exterior: " + entregax.NumExtEntrega + " " + "No. Interior: " + entregax.NumIntentrega + " " + "Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " " });
                entrega.Add(new SelectListItem { Text = "Transportista Calle: " + entregax.CalleEntrega + " " + "No. Exterior: " + entregax.NumExtEntrega + " " + "No. Interior: " + entregax.NumIntentrega + " " + "Colonia: " + entregax.ColoniaEntrega + "Municipio: " + entregax.MunicipioEntrega + " " + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " ", Value = "Transportista Calle: " + entregax.CalleEntrega + " " + "No. Exterior: " + entregax.NumExtEntrega + " " + "No. Interior: " + entregax.NumIntentrega + " " + "Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " " });
                entrega.Add(new SelectListItem { Text = "Mensajeria Calle: " + entregax.CalleEntrega + " " + "No. Exterior: " + entregax.NumExtEntrega + " " + "No. Interior: " + entregax.NumIntentrega + " " + "Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " ", Value = "Mensajeria Calle: " + entregax.CalleEntrega + " " + "No. Exterior: " + entregax.NumExtEntrega + " " + "No. Interior: " + entregax.NumIntentrega + " " + "Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " " });
                entrega.Add(new SelectListItem { Text = "Ocurre Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " ", Value = "Ocurre Colonia: " + entregax.ColoniaEntrega + " " + "Municipio: " + entregax.MunicipioEntrega + " " + "C.P.: " + entregax.CPEntrega + " " + "Estado: " + entregax.Estado + " " });
            }


            ViewBag.entrega = entrega;


            List<SelectListItem> usocfdi = new List<SelectListItem>();
            c_UsoCFDI usocfdib = prov.c_UsoCFDIS.Find(clientes.IDUsoCFDI);
            usocfdi.Add(new SelectListItem { Text = usocfdib.Descripcion, Value = usocfdib.IDUsoCFDI.ToString() });
            usocfdi.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todosuso = prov.c_UsoCFDIS.ToList();
            if (todosuso != null)
            {
                foreach (var y in todosuso)
                {
                    usocfdi.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDUsoCFDI.ToString() });
                }
            }

            ViewBag.usocfdi = usocfdi;
            // ViewBag.IDUsoCFDI = new SelectList(db.c_UsoCFDIS, "IDUsoCFDI", "Descripcion");
            ViewBag.IDAlmacen = new SelectList(db.Almacenes, "IDAlmacen", "Descripcion");

          

           List<VCarrito> pedido = db.Database.SqlQuery<VCarrito>("select (Carrito.Precio * (select dbo.GetTipocambio(GETDATE(),Carrito.IDMoneda,(select IDMoneda from c_Moneda WHERE ClaveMoneda='MXN')))) * Carrito.Cantidad as preciomex,Articulo.MinimoCompra,Articulo.MinimoVenta,c_ClaveUnidad.Nombre as Unidad,Carrito.IDCarrito,Carrito.usuario,Carrito.IDCaracteristica,Carrito.Precio,Carrito.Cantidad,Caracteristica.Presentacion as Presentacion,Articulo.Descripcion,Articulo.IDArticulo,c_Moneda.Descripcion as Moneda,c_Moneda.IDMoneda as IDMoneda,Carrito.Precio * Carrito.Cantidad as Importe, Carrito.Nota, Carrito.IDAlmacen, Articulo.Cref from  Carrito INNER JOIN Caracteristica ON Carrito.IDCaracteristica= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo INNER JOIN c_Moneda ON c_Moneda.IDMoneda =Carrito.IDMoneda INNER JOIN c_ClaveUnidad ON c_ClaveUnidad.IDClaveUnidad = Articulo.IDClaveUnidad where usuario='" + usuario + "'").ToList();

            var divisa = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=Carrito.IDMoneda) as MonedaOrigen, (select SUM(Carrito.Precio * Carrito.Cantidad)) as Subtotal, SUM(Carrito.Precio * Carrito.Cantidad)*0.16 as IVA, (SUM(Carrito.Precio * Carrito.Cantidad)) + (SUM(Carrito.Precio * Carrito.Cantidad)*0.16) as Total ,0 as TotalPesos from Carrito INNER JOIN Caracteristica ON Carrito.IDCaracteristica= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo INNER JOIN c_Moneda ON c_Moneda.IDMoneda = Carrito.IDMoneda INNER JOIN c_ClaveUnidad ON c_ClaveUnidad.IDClaveUnidad = Articulo.IDClaveUnidad where usuario=" + usuario + " group by Carrito.IDMoneda").ToList();
            ViewBag.sumatoria = divisa;
            //try
            //{
            //    subtotal = pedido.Sum(s => s.Importe);
            //    iva = subtotal * (decimal)0.16;
            //    total = subtotal + iva;
            //}
            //catch (Exception e)
            //{

            //}
            //ViewBag.Subtotal = subtotal.ToString("C");
            //ViewBag.IVA = iva.ToString("C");
            //ViewBag.Total = total.ToString("C");

            ViewBag.carrito = pedido;


            ClsDatoEntero c = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarrito) as Dato from Carrito where  usuario='" + usuario + "'").ToList()[0];
            int x = c.Dato;
            ViewBag.dato = x;

            ClsDatoEntero cantidad = db.Database.SqlQuery<ClsDatoEntero>("select count(Cantidad) as Dato from Carrito where Cantidad=0 and usuario='" + usuario + "'").ToList()[0];
            ViewBag.datocantidad = cantidad.Dato;

            ClsDatoEntero preciocontar = db.Database.SqlQuery<ClsDatoEntero>("select count(Precio) as Dato from Carrito where Precio=0 and usuario='" + usuario + "'").ToList()[0];
            ViewBag.datoprecio = preciocontar.Dato;


            List<ValidarCarrito> validaprecio = db.Database.SqlQuery<ValidarCarrito>("select Carrito.Precio, dbo.GetValidaCosto(Articulo.IDArticulo, Carrito.Cantidad, Carrito.Precio) as Dato from Carrito INNER JOIN Caracteristica ON Carrito.IDCaracteristica= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo  where Carrito.usuario='" + usuario + "'").ToList();
            int countDato = validaprecio.Count(s => s.Dato.Equals(true));

            int countCarrito = pedido.Count();

            if (countDato == countCarrito)
            {
                ViewBag.validacarrito = 1;
            }
            else
            {
                ViewBag.validacarrito = 0;
            }
            //Termina la consulta del carrito
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
       


 public ActionResult Create(EncPedido encPedido)
        {
            decimal subtotal = 0, iva = 0, total = 0, subtotalr = 0, ivar = 0, totalr = 0, importetotal = 0, importe = 0, importeiva = 0, Precio = 0;
            List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int usuario = userid.Select(s => s.UserID).FirstOrDefault();
             List<VCarrito> pedido = db.Database.SqlQuery<VCarrito>("select (Carrito.Precio * (select dbo.GetTipocambio(GETDATE(),Carrito.IDMoneda,(select IDMoneda from c_Moneda WHERE ClaveMoneda='MXN')))) * Carrito.Cantidad as preciomex,Articulo.MinimoCompra,Articulo.MinimoVenta,c_ClaveUnidad.Nombre as Unidad,Carrito.IDCarrito,Carrito.usuario,Carrito.IDCaracteristica,Carrito.Precio,Carrito.Cantidad,Caracteristica.Presentacion as Presentacion,Articulo.Descripcion,Articulo.IDArticulo,c_Moneda.Descripcion as Moneda,c_Moneda.IDMoneda as IDMoneda,Carrito.Precio * Carrito.Cantidad as Importe, Carrito.Nota, Carrito.IDAlmacen from  Carrito INNER JOIN Caracteristica ON Carrito.IDCaracteristica= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo INNER JOIN c_Moneda ON c_Moneda.IDMoneda =Carrito.IDMoneda INNER JOIN c_ClaveUnidad ON c_ClaveUnidad.IDClaveUnidad = Articulo.IDClaveUnidad where usuario='" + usuario + "'").ToList();

            
            var divisa = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=Carrito.IDMoneda) as MonedaOrigen, (select SUM(Carrito.Precio * Carrito.Cantidad)) as Subtotal, SUM(Carrito.Precio * Carrito.Cantidad)*0.16 as IVA, (SUM(Carrito.Precio * Carrito.Cantidad)) + (SUM(Carrito.Precio * Carrito.Cantidad)*0.16) as Total ,0 as TotalPesos from Carrito INNER JOIN Caracteristica ON Carrito.IDCaracteristica= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo INNER JOIN c_Moneda ON c_Moneda.IDMoneda = Carrito.IDMoneda INNER JOIN c_ClaveUnidad ON c_ClaveUnidad.IDClaveUnidad = Articulo.IDClaveUnidad where usuario=" + usuario + " group by Carrito.IDMoneda").ToList();
            ViewBag.sumatoria = divisa;
 


 			ViewBag.carrito = pedido;
            //Termina 


            if (ModelState.IsValid)
            {
                int num = 0;
                DateTime fecha = encPedido.Fecha;
                string fecha1 = fecha.ToString("yyyy/MM/dd");

                DateTime fechareq = encPedido.FechaRequiere;
                string fecha2 = fechareq.ToString("yyyy/MM/dd");

                List<c_Moneda> monedaorigen;
                monedaorigen = db.Database.SqlQuery<c_Moneda>("select * from c_Moneda WHERE ClaveMoneda='MXN'").ToList();
                int origen = monedaorigen.Select(s => s.IDMoneda).FirstOrDefault();




                VCambio tcambio = db.Database.SqlQuery<VCambio>("select dbo.GetTipocambio('" + fecha1 + "'," + encPedido.IDMoneda + "," + origen + ") as TC").ToList()[0];
                decimal tCambio = tcambio.TC;

               db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[EncPedido]([Fecha],[FechaRequiere],[IDCliente],[IDFormapago],[IDMoneda],[Observacion],[Subtotal],[IVA],[Total],[IDMetodoPago],[IDCondicionesPago],[Status],[TipoCambio],[UserID],[IDUsoCFDI],[IDVendedor],[Entrega], [OCompra]) values ('" + fecha1 + "','" + fecha2 + "','" + encPedido.IDCliente + "','" + encPedido.IDFormapago + "','" + encPedido.IDMoneda + "','" + encPedido.Observacion + "','" + subtotal + "','" + iva + "','" + total + "','" + encPedido.IDMetodoPago + "','" + encPedido.IDCondicionesPago + "','Inactivo','" + tCambio + "','" + usuario + "','" + encPedido.IDUsoCFDI + "','" + encPedido.IDVendedor + "','" + encPedido.Entrega + "','" + encPedido.OCompra + "')");
                    //db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[EncPedido]([Fecha],[FechaRequiere],[IDCliente],[IDFormapago],[IDMoneda],[Observacion],[Subtotal],[IVA],[Total],[IDMetodoPago],[IDCondicionesPago],[IDAlmacen],[Status],[TipoCambio],[UserID],[IDUsoCFDI],[IDVendedor],[Entrega]) values ('" + fecha1 + "','" + fecha2 + "','" + encPedido.IDCliente + "','" + encPedido.IDFormapago + "','" + encPedido.IDMoneda + "','" + encPedido.Observacion + "','" + subtotal + "','" + iva + "','" + total + "','" + encPedido.IDMetodoPago + "','" + encPedido.IDCondicionesPago + "','" + encPedido.IDAlmacen + "','Inactivo','" + tCambio + "','" + usuario + "','" + encPedido.IDUsoCFDI + "','" + encPedido.IDVendedor + "','" + encPedido.Entrega + "')");
                    db.SaveChanges();


                    List<EncPedido> numero;
                    numero = db.Database.SqlQuery<EncPedido>("SELECT * FROM [dbo].[EncPedido] WHERE IDPedido = (SELECT MAX(IDPedido) from EncPedido)").ToList();
                    num = numero.Select(s => s.IDPedido).FirstOrDefault();

                    //   string cadenafinal = "";
                    for (int i = 0; i < pedido.Count(); i++)
                    {

                        Articulo articulo = new ArticuloContext().Articulo.Find(ViewBag.carrito[i].IDArticulo);
                        Precio = ViewBag.carrito[i].Precio;
                        importe = ViewBag.carrito[i].Cantidad * Precio;
                        importeiva = importe * decimal.Parse(SIAAPI.Properties.Settings.Default.ValorIVA);
                        importetotal = importeiva + importe;
                        db.Database.ExecuteSqlCommand("INSERT INTO DetPedido([IDPedido],[IDArticulo],[Cantidad],[Costo],[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Ordenado],[Caracteristica_ID],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion],[IDDetExterna],[GeneraOrdenP],[IDRemision],[IDPrefactura]) values ('" + num + "','" + ViewBag.carrito[i].IDArticulo + "','" + ViewBag.carrito[i].Cantidad + "','" + Precio + "' * dbo.GetTipocambio('" + fecha1 + "'," + ViewBag.carrito[i].IDMoneda + "," + encPedido.IDMoneda + "),'" + ViewBag.carrito[i].Cantidad + "','0','" + importe + "' * dbo.GetTipocambio('" + fecha1 + "'," + ViewBag.carrito[i].IDMoneda + "," + encPedido.IDMoneda + "),'true','" + importeiva + "' *  dbo.GetTipocambio('" + fecha1 + "'," + ViewBag.carrito[i].IDMoneda + "," + encPedido.IDMoneda + "),'" + importetotal + "' * dbo.GetTipocambio('" + fecha1 + "'," + ViewBag.carrito[i].IDMoneda + "," + encPedido.IDMoneda + "),'" + ViewBag.carrito[i].Nota + "','0','" + ViewBag.carrito[i].IDCaracteristica + "','" + ViewBag.carrito[i].IDAlmacen + "','0','Inactivo','" + ViewBag.carrito[i].Presentacion + "','" + ViewBag.carrito[i].jsonPresentacion + "','0','" + articulo.GeneraOrden + "','0','0')");


                   



                    db.Database.ExecuteSqlCommand("delete from Carrito where IDCarrito='" + ViewBag.carrito[i].IDCarrito + "'");
                        db.SaveChanges();


                    
                    }

				var detallepedidoa = new PedidoContext().DetPedido.Where(s => s.IDPedido == encPedido.IDPedido);

                List<DetPedido> datostotales = db.Database.SqlQuery<DetPedido>("select * from dbo.DetPedido where IDPedido='" + num + "'").ToList();
                subtotalr = datostotales.Sum(s => s.Importe);
                ivar = subtotalr * decimal.Parse(SIAAPI.Properties.Settings.Default.ValorIVA);
                totalr = subtotalr + ivar;
                db.Database.ExecuteSqlCommand("update [dbo].[EncPedido] set [Subtotal]='" + subtotalr + "',[IVA]='" + ivar + "',[Total]='" + totalr + "' where [IDPedido]='" + num + "'");


              

                return RedirectToAction("Index");

            }


            ViewBag.IDFormapago = new SelectList(db.c_FormaPagos, "IDFormaPago", "Descripcion", encPedido.IDFormapago);
            ViewBag.IDMetodoPago = new SelectList(db.c_MetodoPagos, "IDMetodoPago", "Descripcion", encPedido.IDMetodoPago);
            ViewBag.IDMoneda = new SelectList(db.c_Monedas, "IDMoneda", "Descripcion", encPedido.IDMoneda);
            ViewBag.IDCondicionesPago = new SelectList(db.CondicionesPagos, "IDCondicionesPago", "Descripcion", encPedido.IDCondicionesPago);
            ViewBag.IDCliente = new SelectList(db.Clientess, "IDCliente", "Nombre", encPedido.IDCliente);
            ViewBag.IDAlmacen = new SelectList(db.Almacenes, "IDAlmacen", "Descripcion", encPedido.IDAlmacen);
            ViewBag.IDUsoCFDI = new SelectList(db.c_UsoCFDIS, "IDUsoCFDI", "Descripcion", encPedido.IDUsoCFDI);
            return View(encPedido);

        }

        ////////////////////////////////////////////////////////////////////Pedido///////////////////////////////////////////////////////////////////////////////////////////////
        public ActionResult Cotizaciones(int? id, EncPedido encPedido)
        {
            ViewBag.otro = 0;
            decimal subtotal = 0, iva = 0, total = 0, subtotalr = 0, ivar = 0, totalr = 0, importetotal = 0, importe = 0, importeiva = 0, Precio = 0;
            List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int UserID = userid.Select(s => s.UserID).FirstOrDefault();

  
            
            //Si el id es nullo y se verifica que exista un dato en el carrito para extraer al cliente de la cotización en proceso
                ClsDatoEntero w = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where UserID='" + UserID + "'").ToList()[0];
                if (id == null && w.Dato != 0)
                {
                    ClsDatoEntero maxidreq = db.Database.SqlQuery<ClsDatoEntero>("select max(IDCarritoCotizacion) as Dato from CarritoCotizacion  where UserID='" + UserID + "'").ToList()[0];
                    ClsDatoEntero idreq = db.Database.SqlQuery<ClsDatoEntero>("select IDCotizacion as Dato from CarritoCotizacion where UserID='" + UserID + "' and IDCarritoCotizacion='" + maxidreq.Dato + "'").ToList()[0];

                    CotizacionContext bd = new CotizacionContext();
                    ClientesContext pr = new ClientesContext();
                    EncCotizacion encCotizacion = bd.EncCotizaciones.Find(idreq.Dato);


                //ViewBag.IDUsoCFDI = new SelectList(db.c_UsoCFDIS.Where(s => s.IDUsoCFDI.Equals(encCotizacion.IDUsoCFDI)), "IDUsoCFDI", "Descripcion");

                List<SelectListItem> usocfdi = new List<SelectListItem>();
                c_UsoCFDI usocfdib = prov.c_UsoCFDIS.Find(encCotizacion.IDUsoCFDI);
                usocfdi.Add(new SelectListItem { Text = usocfdib.Descripcion, Value = usocfdib.IDUsoCFDI.ToString() });
                usocfdi.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
                var todosuso = prov.c_UsoCFDIS.ToList();
                if (todosuso != null)
                {
                    foreach (var y in todosuso)
                    {
                        usocfdi.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDUsoCFDI.ToString() });
                    }
                }

                ViewBag.usocfdi = usocfdi;

                ViewBag.IDAlmacen = new SelectList(db.Almacenes.Where(s => s.IDAlmacen.Equals(encCotizacion.IDAlmacen)), "IDAlmacen", "Descripcion");

                    var cliente = prov.Clientes.ToList();

                    List<SelectListItem> moneda = new List<SelectListItem>();
                    c_Moneda monedap = pr.c_Monedas.Find(encCotizacion.IDMoneda);
                    moneda.Add(new SelectListItem { Text = monedap.Descripcion, Value = monedap.IDMoneda.ToString() });
                    moneda.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
                    var todosmoneda = prov.c_Monedas.ToList();
                    if (todosmoneda != null)
                    {
                        foreach (var y in todosmoneda)
                        {
                            moneda.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDMoneda.ToString() });
                        }
                    }

                    ViewBag.moneda = moneda;

                    List<SelectListItem> metodo = new List<SelectListItem>();
                    c_MetodoPago metodop = pr.c_MetodoPagos.Find(encCotizacion.IDMetodoPago);
                    metodo.Add(new SelectListItem { Text = metodop.Descripcion, Value = metodop.IDMetodoPago.ToString() });
                    ViewBag.metodo = metodo;

                    List<SelectListItem> forma = new List<SelectListItem>();
                    c_FormaPago formap = pr.c_FormaPagos.Find(encCotizacion.IDFormapago);
                    forma.Add(new SelectListItem { Text = formap.Descripcion, Value = formap.IDFormaPago.ToString() });
                    ViewBag.forma = forma;

                    List<SelectListItem> condiciones = new List<SelectListItem>();
                    CondicionesPago condicionesp = pr.CondicionesPagos.Find(encCotizacion.IDCondicionesPago);
                    condiciones.Add(new SelectListItem { Text = condicionesp.Descripcion, Value = condicionesp.IDCondicionesPago.ToString() });
                    ViewBag.condiciones = condiciones;

                    List<SelectListItem> vendedor = new List<SelectListItem>();
                    Vendedor vendedorp = pr.Vendedores.Find(encCotizacion.IDVendedor);
                    vendedor.Add(new SelectListItem { Text = vendedorp.Nombre, Value = vendedorp.IDVendedor.ToString() });
                    ViewBag.vendedor = vendedor;

                    List<SelectListItem> li = new List<SelectListItem>();
                    Clientes mm = pr.Clientes.Find(encCotizacion.IDCliente);
                    li.Add(new SelectListItem { Text = mm.Nombre, Value = mm.IDCliente.ToString() });
                    ViewBag.cliente = li;

                    List<SelectListItem> entrega = new List<SelectListItem>();
                    List<VEntrega> entregasall = db.Database.SqlQuery<VEntrega>("select en.IDEntrega,en.IDCliente,en.CalleEntrega,en.NumExtEntrega,ISNULL(en.NumIntEntrega,0),en.ColoniaEntrega,en.MunicipioEntrega,en.CPEntrega,en.ObservacionEntrega,es.Estado from dbo.Entrega as en inner join Estados as es on es.IDEstado=en.IDEstado where IDCliente='" + encCotizacion.IDCliente + "'").ToList();
                    ViewBag.entregaa = entregasall;
                    entrega.Add(new SelectListItem { Text = "El Cliente Recoge", Value = "El Cliente Recoge" });
                    for (int i = 0; i < entregasall.Count(); i++)
                    {
                        entrega.Add(new SelectListItem { Text = "Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                        entrega.Add(new SelectListItem { Text = "Transportista Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Transportista Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                        entrega.Add(new SelectListItem { Text = "Mensajeria Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Mensajeria Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                        entrega.Add(new SelectListItem { Text = "Ocurre Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Ocurre Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                    }
                    ViewBag.entrega = entrega;
                    ViewBag.otro = 0;
                }

                //Se verifica que el id sea valido 
            if (id != null)
            {
                int? idaux = id;
                ClsDatoEntero existe = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCotizacion) as Dato from EncCotizacion where IDCotizacion= '" + id + "' and UserID='" + UserID + "'").ToList()[0];
                if (existe.Dato == 0)
                {
                    ViewBag.mensaje = "Cotización inexistente";
                    ClsDatoEntero countcc = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where UserID='" + UserID + "'").ToList()[0];
                    if (countcc.Dato != 0) {
                        ClsDatoEntero idcotizacion = db.Database.SqlQuery<ClsDatoEntero>("select EncCotizacion.IDCotizacion as Dato from EncCotizacion inner join CarritoCotizacion  on EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion where EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion").ToList()[0];
                        idaux = idcotizacion.Dato;
                        ViewBag.otro = 0;
                    }
                    else
                    {
                        ViewBag.data = null;

                        ViewBag.otro = 0;

                        ViewBag.datos = null;
                        ViewBag.dato = 0;
                    }
                    return View();
                }
                else
                {
                    ClsDatoEntero countcc = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where UserID='" + UserID + "'").ToList()[0];
                    if (countcc.Dato != 0)
                    {
                        ClsDatoEntero clientecotizacion = db.Database.SqlQuery<ClsDatoEntero>("select EncCotizacion.IDCliente as Dato from EncCotizacion inner join CarritoCotizacion  on EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion where EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion").ToList()[0];
                        CotizacionContext cotizacion = new CotizacionContext();
                        EncCotizacion encCotizacion2 = cotizacion.EncCotizaciones.Find(id);
                        if (clientecotizacion.Dato != encCotizacion2.IDCliente)
                        {
                            ClsDatoEntero idcotizacion = db.Database.SqlQuery<ClsDatoEntero>("select EncCotizacion.IDCotizacion as Dato from EncCotizacion inner join CarritoCotizacion  on EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion where EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion").ToList()[0];
                            idaux = idcotizacion.Dato;
                            //ViewBag.mensaje = "La cotización que se desea agregar proviene de un cliente distinto, por lo tanto, no se puede continuar con la operación";
                        }
                        
                    }
                }
                CotizacionContext bd = new CotizacionContext();
                    ClientesContext pr = new ClientesContext();
                    EncCotizacion encCotizacion = bd.EncCotizaciones.Find(idaux);

                    ViewBag.IDUsoCFDI = new SelectList(db.c_UsoCFDIS.Where(s => s.IDUsoCFDI.Equals(encCotizacion.IDUsoCFDI)), "IDUsoCFDI", "Descripcion");
                    ViewBag.IDAlmacen = new SelectList(db.Almacenes.Where(s => s.IDAlmacen.Equals(encCotizacion.IDAlmacen)), "IDAlmacen", "Descripcion");

                    var cliente = prov.Clientes.ToList();

                    List<SelectListItem> moneda = new List<SelectListItem>();
                    c_Moneda monedap = pr.c_Monedas.Find(encCotizacion.IDMoneda);
                    moneda.Add(new SelectListItem { Text = monedap.Descripcion, Value = monedap.IDMoneda.ToString() });
                    moneda.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
                    var todosmoneda = prov.c_Monedas.ToList();
                    if (todosmoneda != null)
                    {
                        foreach (var y in todosmoneda)
                        {
                            moneda.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDMoneda.ToString() });
                        }
                    }

                    ViewBag.moneda = moneda;

                    List<SelectListItem> metodo = new List<SelectListItem>();
                    c_MetodoPago metodop = pr.c_MetodoPagos.Find(encCotizacion.IDMetodoPago);
                    metodo.Add(new SelectListItem { Text = metodop.Descripcion, Value = metodop.IDMetodoPago.ToString() });
                    ViewBag.metodo = metodo;

                    List<SelectListItem> forma = new List<SelectListItem>();
                    c_FormaPago formap = pr.c_FormaPagos.Find(encCotizacion.IDFormapago);
                    forma.Add(new SelectListItem { Text = formap.Descripcion, Value = formap.IDFormaPago.ToString() });
                    ViewBag.forma = forma;

                    List<SelectListItem> condiciones = new List<SelectListItem>();
                    CondicionesPago condicionesp = pr.CondicionesPagos.Find(encCotizacion.IDCondicionesPago);
                    condiciones.Add(new SelectListItem { Text = condicionesp.Descripcion, Value = condicionesp.IDCondicionesPago.ToString() });
                    ViewBag.condiciones = condiciones;

                    List<SelectListItem> vendedor = new List<SelectListItem>();
                    Vendedor vendedorp = pr.Vendedores.Find(encCotizacion.IDVendedor);
                    vendedor.Add(new SelectListItem { Text = vendedorp.Nombre, Value = vendedorp.IDVendedor.ToString() });
                    ViewBag.vendedor = vendedor;

                    List<SelectListItem> li = new List<SelectListItem>();
                    Clientes mm = pr.Clientes.Find(encCotizacion.IDCliente);
                    li.Add(new SelectListItem { Text = mm.Nombre, Value = mm.IDCliente.ToString() });
                    ViewBag.cliente = li;

                    List<SelectListItem> entrega = new List<SelectListItem>();
                    List<VEntrega> entregasall = db.Database.SqlQuery<VEntrega>("select en.IDEntrega,en.IDCliente,en.CalleEntrega,en.NumExtEntrega,ISNULL(en.NumIntEntrega,0),en.ColoniaEntrega,en.MunicipioEntrega,en.CPEntrega,en.ObservacionEntrega,es.Estado from dbo.Entrega as en inner join Estados as es on es.IDEstado=en.IDEstado where IDCliente='" + encCotizacion.IDCliente + "'").ToList();
                    ViewBag.entregaa = entregasall;
                    entrega.Add(new SelectListItem { Text = "El Cliente Recoge", Value = "El Cliente Recoge" });
                    for (int i = 0; i < entregasall.Count(); i++)
                    {
                        entrega.Add(new SelectListItem { Text = "Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                        entrega.Add(new SelectListItem { Text = "Transportista Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Transportista Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                        entrega.Add(new SelectListItem { Text = "Mensajeria Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Mensajeria Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                        entrega.Add(new SelectListItem { Text = "Ocurre Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Ocurre Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                    }
                    ViewBag.entrega = entrega;
                }
            
                List<VEncCotizacion> orden = db.Database.SqlQuery<VEncCotizacion>("select EncCotizacion.IDCotizacion,EncCotizacion.Fecha, EncCotizacion.FechaRequiere, Clientes.Nombre as Cliente, c_FormaPago.Descripcion as FormaPago, c_Moneda.Descripcion as Divisa, EncCotizacion.Observacion, EncCotizacion.Subtotal, EncCotizacion.IVA, EncCotizacion.Total,c_MetodoPago.Descripcion as MetodoPago, CondicionesPago.Descripcion as CondicionesPago, Almacen.Descripcion as Almacen, EncCotizacion.Status,EncCotizacion.UserID, EncCotizacion.TipoCambio, c_UsoCFDI.Descripcion as UsoCFDI from EncCotizacion inner join  Clientes on Clientes.IDCliente=EncCotizacion.IDCliente inner join c_FormaPago on c_FormaPago.IDFormaPago=EncCotizacion.IDFormapago inner join c_Moneda on c_Moneda.IDMoneda=EncCotizacion.IDMoneda inner join c_MetodoPago on c_MetodoPago.IDMetodoPago=EncCotizacion.IDMetodoPago inner join CondicionesPago on CondicionesPago.IDCondicionesPago=EncCotizacion.IDCondicionesPago inner join Almacen on Almacen.IDAlmacen=EncCotizacion.IDAlmacen inner join c_UsoCFDI on c_UsoCFDI.IDUsoCFDI=EncCotizacion.IDUsoCFDI where EncCotizacion.IDCotizacion='" + id + "' and EncCotizacion.Status='Activo'").ToList();
                ViewBag.data = orden;

                ClsDatoEntero denc = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCotizacion) as Dato from EncCotizacion where IDCotizacion='" + id + "' and Status='Activo'").ToList()[0];

                List<VDetCotizacion> elementos = db.Database.SqlQuery<VDetCotizacion>("select Articulo.MinimoCompra,DetCotizacion.IDDetCotizacion, DetCotizacion.IDCotizacion,DetCotizacion.Suministro,Articulo.Descripcion as Articulo,DetCotizacion.Cantidad,DetCotizacion.Costo,DetCotizacion.CantidadPedida,DetCotizacion.Descuento,DetCotizacion.Importe,DetCotizacion.IVA,DetCotizacion.ImporteIva,DetCotizacion.ImporteTotal,DetCotizacion.Nota,DetCotizacion.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion, DetCotizacion.Status from  DetCotizacion INNER JOIN Caracteristica ON DetCotizacion.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where IDCotizacion='" + id + "' and Status='Activo'").ToList();
                ViewBag.datos = elementos;

                ClsDatoEntero dcompra = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCotizacion) as Dato from DetCotizacion where IDCotizacion='" + id + "' and Status='Activo'").ToList()[0];


                if (id != null && denc.Dato > 0 && dcompra.Dato > 0)
                {

                    ClsDatoEntero cantcarrito = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where UserID='" + UserID + "'").ToList()[0];
                    if (cantcarrito.Dato != 0)
                    {
                        ClsDatoEntero clientecotizacion = db.Database.SqlQuery<ClsDatoEntero>("select EncCotizacion.IDCliente as Dato from EncCotizacion inner join CarritoCotizacion  on EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion where EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion").ToList()[0];
                        CotizacionContext cotizacion = new CotizacionContext();
                        EncCotizacion encCotizacion = cotizacion.EncCotizaciones.Find(id);
                        if (clientecotizacion.Dato == encCotizacion.IDCliente)
                        {

                        List<VDetCotizacion> datoscotizacion = db.Database.SqlQuery<VDetCotizacion>("select DetCotizacion.IDDetCotizacion,DetCotizacion.Status,Articulo.MinimoVenta,Caracteristica.ID as Caracteristica_ID,DetCotizacion.IDCotizacion,Articulo.Descripcion as Articulo,DetCotizacion.Cantidad,DetCotizacion.Costo,DetCotizacion.CantidadPedida,DetCotizacion.Descuento,DetCotizacion.Importe,DetCotizacion.IVA,DetCotizacion.ImporteIva,DetCotizacion.ImporteTotal, DetCotizacion.Nota,DetCotizacion.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion from  DetCotizacion INNER JOIN Caracteristica ON DetCotizacion.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where IDCotizacion='" + id + "'").ToList();
                        ViewBag.datoscotizacion = datoscotizacion;
                        for (int i = 0; i < datoscotizacion.Count(); i++)
                        {
                            DetCotizacion detCotizacion = cotizacion.DetCotizaciones.Find(ViewBag.datoscotizacion[i].IDDetCotizacion);
                            ClsDatoEntero caractpres = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where IDArticulo ='" + detCotizacion.IDArticulo + "' and Caracteristica_ID='" + detCotizacion.Caracteristica_ID + "' ").ToList()[0];
                            if (caractpres.Dato != 0)
                            {
                                ViewBag.mensaje = "No se puede repetir una presentación";
                            }
                            else
                            {
                                db.Database.ExecuteSqlCommand("INSERT INTO CarritoCotizacion([IDDetExterna],[IDCotizacion],[IDArticulo],[Cantidad],[Costo],[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Ordenado],[Caracteristica_ID],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion]) values ('" + ViewBag.datoscotizacion[i].IDDetCotizacion + "','" + id + "','" + detCotizacion.IDArticulo + "','" + ViewBag.datoscotizacion[i].Cantidad + "','" + ViewBag.datoscotizacion[i].Costo + "','" + ViewBag.datoscotizacion[i].Cantidad + "','0','" + ViewBag.datoscotizacion[i].Importe + "','true','" + ViewBag.datoscotizacion[i].ImporteIva + "','" + ViewBag.datoscotizacion[i].ImporteTotal + "','" + ViewBag.datoscotizacion[i].Nota + "','0','" + detCotizacion.Caracteristica_ID + "','" + encCotizacion.IDAlmacen + "','0','Activo','" + ViewBag.datoscotizacion[i].Presentacion + "','" + ViewBag.datoscotizacion[i].jsonPresentacion + "')");
                                db.Database.ExecuteSqlCommand("update [dbo].[DetCotizacion] set [Status]='Finalizado' where [IDDetCotizacion]='" + ViewBag.datoscotizacion[i].IDDetCotizacion + "'");
                                db.Database.ExecuteSqlCommand("update [dbo].[CarritoCotizacion] set [UserID]='" + UserID + "' where [IDCotizacion]='" + id + "'");
                            }
                  
                        }
                       
                      

                        ClsDatoEntero a = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCotizacion) as Dato from DetCotizacion where IDCotizacion ='" + id + "'").ToList()[0];
                        int x = a.Dato;

                        ClsDatoEntero b = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCotizacion) as Dato from DetCotizacion where IDCotizacion ='" + id+ "' and Status='Finalizado'").ToList()[0];
                        int y = b.Dato;

                        if (x == y)
                        {
                            db.Database.ExecuteSqlCommand("update [dbo].[EncCotizacion] set [Status]='Finalizado' where [IDCotizacion]='" + id + "'");
                        }
                       
                    }
                        else
                        {
                            ViewBag.otro = 0;
                            ViewBag.mensaje = "La cotización que se desea agregar proviene de un cliente distinto, por lo tanto, no se puede continuar con la operación";
                        }
                    }
                    else
                    {
                        db.Database.ExecuteSqlCommand("INSERT INTO CarritoCotizacion([IDDetExterna],[IDCotizacion],[IDArticulo],[Cantidad],[Costo],[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Ordenado],[Caracteristica_ID],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion]) SELECT [IDDetCotizacion],[IDCotizacion],[IDArticulo],[Cantidad],[Costo],[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Ordenado],[Caracteristica_ID],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion] FROM DetCotizacion where IDCotizacion='" + id + "' and Status='Activo'");
                        db.Database.ExecuteSqlCommand("update [dbo].[CarritoCotizacion] set [UserID]='" + UserID + "' where [IDCotizacion]='" + id + "'");
                        db.Database.ExecuteSqlCommand("update [dbo].[EncCotizacion] set [Status]='Finalizado' where [IDCotizacion]='" + id + "'");
                        db.Database.ExecuteSqlCommand("update [dbo].[DetCotizacion] set [Status]='Finalizado' where [IDCotizacion]='" + id + "'");
                    }


                }

                List<VCarritoCotizacion> lista = db.Database.SqlQuery<VCarritoCotizacion>("select Articulo.MinimoCompra,CarritoCotizacion.IDDetExterna,CarritoCotizacion.IDCarritoCotizacion,CarritoCotizacion.IDCotizacion,CarritoCotizacion.Suministro,Articulo.Descripcion as Articulo,CarritoCotizacion.Cantidad,CarritoCotizacion.Costo,CarritoCotizacion.CantidadPedida,CarritoCotizacion.Descuento,CarritoCotizacion.Importe,CarritoCotizacion.IVA,CarritoCotizacion.ImporteIva,CarritoCotizacion.ImporteTotal,CarritoCotizacion.Nota,CarritoCotizacion.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion  from  CarritoCotizacion INNER JOIN Caracteristica ON CarritoCotizacion.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where UserID='" + UserID + "'").ToList();
                ViewBag.carritor = lista;

                var resumen = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncCotizacion.IDMoneda) as MonedaOrigen, (SUM(Importe)) as Subtotal, (SUM(ImporteIva)) as IVA, (SUM(ImporteTotal)) as Total, (SUM(ImporteTotal * EncCotizacion.TipoCambio)) as TotalenPesos from CarritoCotizacion inner join EncCotizacion on EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion where CarritoCotizacion.UserID='" + UserID + "' group by EncCotizacion.IDMoneda").ToList();
                ViewBag.sumatoria = resumen;


                ClsDatoEntero c = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where  UserID='" + UserID + "'").ToList()[0];
                ViewBag.dato = c.Dato;
          

                //Insertar Encabezado de Orden de Compra
                if (encPedido.IDFormapago != 0)
                {


                    List<VCarritoCotizacion> carritor = db.Database.SqlQuery<VCarritoCotizacion>("select Caracteristica.ID as IDCaracteristica,Articulo.IDArticulo,Articulo.MinimoCompra,CarritoCotizacion.IDDetExterna,CarritoCotizacion.IDCarritoCotizacion,CarritoCotizacion.IDCotizacion,CarritoCotizacion.Suministro,Articulo.Descripcion as Articulo,CarritoCotizacion.Cantidad,CarritoCotizacion.Costo,CarritoCotizacion.CantidadPedida,CarritoCotizacion.Descuento,CarritoCotizacion.Importe,CarritoCotizacion.IVA,CarritoCotizacion.ImporteIva,CarritoCotizacion.ImporteTotal,CarritoCotizacion.Nota,CarritoCotizacion.Ordenado,Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion  from  CarritoCotizacion INNER JOIN Caracteristica ON CarritoCotizacion.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where UserID='" + UserID + "'").ToList();

                    ViewBag.carritor = carritor;
                    //Termina 


                    int num = 0;
                    DateTime fecha = encPedido.Fecha;
                    string fecha1 = fecha.ToString("yyyy/MM/dd");

                    DateTime fechareq = encPedido.FechaRequiere;
                    string fecha2 = fechareq.ToString("yyyy/MM/dd");

                    List<c_Moneda> clavemoneda = db.Database.SqlQuery<c_Moneda>("select * from c_Moneda WHERE IDMoneda='" + encPedido.IDMoneda + "'").ToList();
                    string clave = clavemoneda.Select(s => s.ClaveMoneda).FirstOrDefault();


                    db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[EncPedido]([Fecha],[FechaRequiere],[IDCliente],[IDFormapago],[IDMoneda],[Observacion],[Subtotal],[IVA],[Total],[IDMetodoPago],[IDCondicionesPago],[IDAlmacen],[Status],[TipoCambio],[UserID],[IDUsoCFDI],[IDVendedor],[Entrega],[OCompra]) values ('" + fecha1 + "','" + fecha2 + "','" + encPedido.IDCliente + "','" + encPedido.IDFormapago + "','" + encPedido.IDMoneda + "','" + encPedido.Observacion + "','" + subtotal + "','" + iva + "','" + total + "','" + encPedido.IDMetodoPago + "','" + encPedido.IDCondicionesPago + "','" + encPedido.IDAlmacen + "','Inactivo','1','" + UserID + "','" + encPedido.IDUsoCFDI + "','" + encPedido.IDVendedor + "','" + encPedido.Entrega + "','"+encPedido.OCompra+"')");
                    db.SaveChanges();

                    List<EncPedido> numero = db.Database.SqlQuery<EncPedido>("SELECT * FROM [dbo].[EncPedido] WHERE IDPedido = (SELECT MAX(IDPedido) from EncPedido)").ToList();
                    num = numero.Select(s => s.IDPedido).FirstOrDefault();


                    for (int i = 0; i < carritor.Count(); i++)
                    {
                        CotizacionContext dbreq = new CotizacionContext();
                        EncCotizacion encCotizacion = dbreq.EncCotizaciones.Find(ViewBag.carritor[i].IDCotizacion);
                        //Datos para tipo de cambio
                        List<c_Moneda> claved = db.Database.SqlQuery<c_Moneda>("select * from c_Moneda WHERE IDMoneda='" + encCotizacion.IDMoneda + "'").ToList();
                        string clavedet = claved.Select(s => s.ClaveMoneda).FirstOrDefault();

                    List<c_Moneda> uno = db.Database.SqlQuery<c_Moneda>("select * from c_Moneda WHERE ClaveMoneda='" + clave + "'").ToList();
                    int unoc = uno.Select(s => s.IDMoneda).FirstOrDefault();

                    List<c_Moneda> dos = db.Database.SqlQuery<c_Moneda>("select * from c_Moneda WHERE ClaveMoneda='" + clavedet + "'").ToList();
                    int dosc = dos.Select(s => s.IDMoneda).FirstOrDefault();

                    VCambio cambiodet = db.Database.SqlQuery<VCambio>("select dbo.GetTipocambio('" + fecha1 + "'," + dosc + "," + unoc + ") as TC").ToList()[0];
                    decimal Cambiodet = cambiodet.TC;

                    //Fin de tipo de cambio
                        Precio = ViewBag.carritor[i].Costo * Cambiodet;
                        importe = ViewBag.carritor[i].Cantidad * Precio;
                        importeiva = importe * (decimal)0.16;
                        importetotal = importeiva + importe;

                        //Insercion de Detalle de Orden de Compra
                    Articulo articulo = new ArticuloContext().Articulo.Find(ViewBag.carritor[i].IDArticulo);
                    db.Database.ExecuteSqlCommand("INSERT INTO DetPedido([IDPedido],[IDArticulo],[Cantidad],[Costo],[CantidadPedida],[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Ordenado],[Caracteristica_ID],[IDAlmacen],[Suministro],[Status],[Presentacion],[jsonPresentacion],[IDDetExterna],[GeneraOrdenP],[IDRemision],[IDPrefactura]) values ('" + num + "','" + ViewBag.carritor[i].IDArticulo + "','" + ViewBag.carritor[i].Cantidad + "','" + Precio + "','" + ViewBag.carritor[i].Cantidad + "','0','" + importe + "','true','" + importeiva + "','" + importetotal + "','" + ViewBag.carritor[i].Nota + "','0','" + ViewBag.carritor[i].IDCaracteristica + "','" + encPedido.IDAlmacen + "','0','Inactivo','" + ViewBag.carritor[i].Presentacion + "','" + ViewBag.carritor[i].jsonPresentacion + "','" + ViewBag.carritor[i].IDCotizacion + "','" + articulo.GeneraOrden + "','0','0')");

                    //db.Database.ExecuteSqlCommand("exec dbo.MovArt'" + fecha1 + "'," + ViewBag.carritor[i].IDCaracteristica + ",'PedVta'," + ViewBag.carritor[i].Cantidad + ",'Pedido'," + num + ",0,'" + encPedido.IDAlmacen + "','" + ViewBag.carritor[i].Nota + "',0");
                    List<DetPedido> numero2 = db.Database.SqlQuery<DetPedido>("SELECT * FROM [dbo].[DetPedido] WHERE IDDetPedido = (SELECT MAX(IDDetPedido) from DetPedido)").ToList();
                        int num2 = numero2.Select(s => s.IDDetPedido).FirstOrDefault();
                        db.Database.ExecuteSqlCommand("insert into [dbo].[MovComercial] ([DocumentoDestino],[IDDestino],[Cantidad],[Fecha],[IDOrigen],[DocumentoOrigen],[UserID],[IDDetOrigen],[IDDetDestino]) values('Pedido','" + num + "','" + ViewBag.carritor[i].Cantidad + "','" + fecha1 + "','" + ViewBag.carritor[i].IDCotizacion + "','Cotización','" + UserID + "','" + ViewBag.carritor[i].IDDetExterna + "','" + num2 + "')");

                        db.Database.ExecuteSqlCommand("delete from CarritoCotizacion where IDCarritoCotizacion='" + ViewBag.carritor[i].IDCarritoCotizacion + "'");


                    }
                    List<c_Moneda> monedaorigen = db.Database.SqlQuery<c_Moneda>("select * from c_Moneda WHERE ClaveMoneda='MXN'").ToList();
                    int origen = monedaorigen.Select(s => s.IDMoneda).FirstOrDefault();

                    VCambio cambio = db.Database.SqlQuery<VCambio>("select dbo.GetTipocambio('" + fecha1 + "'," + encPedido.IDMoneda + "," + origen + ") as TC").ToList()[0];
                    decimal Cambio = cambio.TC;

                    List<DetPedido> datostotales = db.Database.SqlQuery<DetPedido>("select * from dbo.DetPedido where IDPedido='" + num + "'").ToList();
                    subtotalr = datostotales.Sum(s => s.Importe);
                    ivar = subtotalr * (decimal)0.16;
                    totalr = subtotalr + ivar;
                    db.Database.ExecuteSqlCommand("update [dbo].[EncPedido] set [TipoCambio]='" + Cambio + "',[Subtotal]='" + subtotalr + "',[IVA]='" + ivar + "',[Total]='" + totalr + "' where [IDPedido]='" + num + "'");

                    return RedirectToAction("Index");

                }
            
            return View();
        }

    
        public ActionResult deletecarrito(int? id)
        {
            CarritoContext cr = new CarritoContext();
            CarritoCotizacion carritoCotizacion = cr.CarritoCotizaciones.Find(id);
            List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
            int UserID = userid.Select(s => s.UserID).FirstOrDefault();
            
            db.Database.ExecuteSqlCommand("delete from [dbo].[CarritoCotizacion] where [IDCarritoCotizacion]='" + id + "'");
            db.Database.ExecuteSqlCommand("update [dbo].[DetCotizacion] set [Status]='Activo' where [IDDetCotizacion]='" + carritoCotizacion.IDDetExterna + "'");
            db.Database.ExecuteSqlCommand("update [dbo].[EncCotizacion] set [Status]='Activo' where [IDCotizacion]='" + carritoCotizacion.IDCotizacion + "'");


            ClsDatoEntero dato = db.Database.SqlQuery<ClsDatoEntero>("select count(IDCarritoCotizacion) as Dato from CarritoCotizacion where UserID ='" + UserID + "'").ToList()[0];
            if (dato.Dato == 0)
            {
                return RedirectToAction("Index", "EncCotizacion");
            }
            ViewBag.id = carritoCotizacion.IDCotizacion;



            ClientesContext pr = new ClientesContext();
            CotizacionContext bd = new CotizacionContext();
            EncCotizacion encCotizacion = bd.EncCotizaciones.Find(carritoCotizacion.IDCotizacion);
            ViewBag.IDUsoCFDI = new SelectList(db.c_UsoCFDIS.Where(s => s.IDUsoCFDI.Equals(encCotizacion.IDUsoCFDI)), "IDUsoCFDI", "Descripcion");
            ViewBag.IDAlmacen = new SelectList(db.Almacenes.Where(s => s.IDAlmacen.Equals(encCotizacion.IDAlmacen)), "IDAlmacen", "Descripcion");

            var cliente = prov.Clientes.ToList();

            List<SelectListItem> moneda = new List<SelectListItem>();
            c_Moneda monedap = pr.c_Monedas.Find(encCotizacion.IDMoneda);
            moneda.Add(new SelectListItem { Text = monedap.Descripcion, Value = monedap.IDMoneda.ToString() });
            moneda.Add(new SelectListItem { Text = "-------------------------", Value = "0" });
            var todosmoneda = prov.c_Monedas.ToList();
            if (todosmoneda != null)
            {
                foreach (var y in todosmoneda)
                {
                    moneda.Add(new SelectListItem { Text = y.Descripcion, Value = y.IDMoneda.ToString() });
                }
            }

            ViewBag.moneda = moneda;

            List<SelectListItem> metodo = new List<SelectListItem>();
            c_MetodoPago metodop = pr.c_MetodoPagos.Find(encCotizacion.IDMetodoPago);
            metodo.Add(new SelectListItem { Text = metodop.Descripcion, Value = metodop.IDMetodoPago.ToString() });
            ViewBag.metodo = metodo;

            List<SelectListItem> forma = new List<SelectListItem>();
            c_FormaPago formap = pr.c_FormaPagos.Find(encCotizacion.IDFormapago);
            forma.Add(new SelectListItem { Text = formap.Descripcion, Value = formap.IDFormaPago.ToString() });
            ViewBag.forma = forma;

            List<SelectListItem> condiciones = new List<SelectListItem>();
            CondicionesPago condicionesp = pr.CondicionesPagos.Find(encCotizacion.IDCondicionesPago);
            condiciones.Add(new SelectListItem { Text = condicionesp.Descripcion, Value = condicionesp.IDCondicionesPago.ToString() });
            ViewBag.condiciones = condiciones;

            List<SelectListItem> li = new List<SelectListItem>();
            Clientes mm = pr.Clientes.Find(encCotizacion.IDCliente);
            li.Add(new SelectListItem { Text = mm.Nombre, Value = mm.IDCliente.ToString() });
            ViewBag.cliente = li;

            List<SelectListItem> vendedor = new List<SelectListItem>();
            Vendedor vendedorp = pr.Vendedores.Find(encCotizacion.IDVendedor);
            vendedor.Add(new SelectListItem { Text = vendedorp.Nombre, Value = vendedorp.IDVendedor.ToString() });
            ViewBag.vendedor = vendedor;

            List<SelectListItem> entrega = new List<SelectListItem>();
            List<VEntrega> entregasall = db.Database.SqlQuery<VEntrega>("select en.IDEntrega,en.IDCliente,en.CalleEntrega,en.NumExtEntrega,ISNULL(en.NumIntEntrega,0),en.ColoniaEntrega,en.MunicipioEntrega,en.CPEntrega,en.ObservacionEntrega,es.Estado from dbo.Entrega as en inner join Estados as es on es.IDEstado=en.IDEstado where IDCliente='" + encCotizacion.IDCliente + "'").ToList();
            ViewBag.entregaa = entregasall;
            entrega.Add(new SelectListItem { Text = "El Cliente Recoge", Value = "El Cliente Recoge" });
            for (int i = 0; i < entregasall.Count(); i++)
            {
                entrega.Add(new SelectListItem { Text = "Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                entrega.Add(new SelectListItem { Text = "Transportista Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Transportista Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                entrega.Add(new SelectListItem { Text = "Mensajeria Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Mensajeria Calle: " + ViewBag.entregaa[i].CalleEntrega + " " + "No. Exterior: " + ViewBag.entregaa[i].NumExtEntrega + " " + "No. Interior: " + ViewBag.entregaa[i].NumIntentrega + " " + "Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
                entrega.Add(new SelectListItem { Text = "Ocurre Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " ", Value = "Ocurre Colonia: " + ViewBag.entregaa[i].ColoniaEntrega + " " + "Municipio: " + ViewBag.entregaa[i].MunicipioEntrega + " " + "C.P.: " + ViewBag.entregaa[i].CPEntrega + " " + "Estado: " + ViewBag.entregaa[i].Estado + " " });
            }
            ViewBag.entrega = entrega;

            ViewBag.data = null;

            ViewBag.otro = 0;

            ViewBag.datos = null;


            List<VCarritoCotizacion> lista = db.Database.SqlQuery<VCarritoCotizacion>("select Articulo.MinimoCompra,CarritoCotizacion.IDDetExterna,CarritoCotizacion.IDCarritoCotizacion,CarritoCotizacion.IDCotizacion,CarritoCotizacion.Suministro,Articulo.Descripcion as Articulo,CarritoCotizacion.Cantidad,CarritoCotizacion.Costo,CarritoCotizacion.CantidadPedida,CarritoCotizacion.Descuento,CarritoCotizacion.Importe,CarritoCotizacion.IVA,CarritoCotizacion.ImporteIva,CarritoCotizacion.ImporteTotal,CarritoCotizacion.Nota,CarritoCotizacion.Ordenado, Caracteristica.Presentacion as Presentacion,Caracteristica.jsonPresentacion as jsonPresentacion  from  CarritoCotizacion INNER JOIN Caracteristica ON CarritoCotizacion.Caracteristica_ID= Caracteristica.ID INNER JOIN Articulo ON Articulo.IDArticulo = Caracteristica.Articulo_IDArticulo where UserID='" + UserID + "'").ToList();
            ViewBag.carritor = lista;

            var resumen = db.Database.SqlQuery<ResumenFac>("select (select ClaveMoneda FROM C_MONEDA WHERE IDMoneda=EncCotizacion.IDMoneda) as MonedaOrigen, (SUM(Importe)) as Subtotal, (SUM(ImporteIva)) as IVA, (SUM(ImporteTotal)) as Total, (SUM(ImporteTotal * EncCotizacion.TipoCambio)) as TotalenPesos from CarritoCotizacion inner join EncCotizacion on EncCotizacion.IDCotizacion=CarritoCotizacion.IDCotizacion where CarritoCotizacion.UserID='" + UserID + "' group by EncCotizacion.IDMoneda").ToList();
            ViewBag.sumatoria = resumen;



            return View("Cotizaciones");


        }

        public ActionResult Edit(int id)
        {

            EncPedido pedido = new PedidoContext().EncPedidos.Find(id);

            List<SelectListItem> vendedor = new List<SelectListItem>();
      
            var todosvendedor = prov.Vendedores.ToList();
            if (todosvendedor != null)
            {
                foreach (Vendedor y in todosvendedor)
                {
                    SelectListItem eleven = new SelectListItem { Text = y.Nombre, Value = y.IDVendedor.ToString() };
                    if (y.IDVendedor==pedido.IDVendedor)
                    {
                        eleven.Selected = true;
                    }
                    vendedor.Add(eleven);
                }
            }

            ViewBag.vendedor = vendedor;
            return View(pedido);
        }


        [HttpPost]
        public ActionResult Edit(EncPedido elemento)

        {
            string cadena = "update Encpedido set IDVendedor=" + elemento.IDVendedor + ", Observacion='" + elemento.Observacion + "',Ocompra='" + elemento.OCompra + "', Entrega='" + elemento.Entrega + "', TipoCambio=" + elemento.TipoCambio + " where idPedido=" + elemento.IDPedido;
            new PedidoContext().Database.ExecuteSqlCommand(cadena);
            return RedirectToAction("Details", new { id = elemento.IDPedido });
        }

        [HttpPost]
        public JsonResult Edititem(int id, decimal cantidad)
        {
            try
            {
                decimal importe = 0, importeiva = 0, importetotal = 0;
                CarritoContext car = new CarritoContext();
                CarritoCotizacion carritocotizacion = car.CarritoCotizaciones.Find(id);
                List<User> userid = db.Database.SqlQuery<User>("select * from [dbo].[User] where Username='" + User.Identity.Name + "'").ToList();
                int usuario = userid.Select(s => s.UserID).FirstOrDefault();
                importe =carritocotizacion.Costo*cantidad;
                importeiva = importe * (decimal)0.16; ;
                importetotal =importe+importeiva;

                 db.Database.ExecuteSqlCommand("update [dbo].[CarritoCotizacion] set [Cantidad]=" + cantidad + ",[Importe]='"+importe+"',[ImporteIva]='"+importeiva+"',[ImporteTotal]='"+importetotal+ "' where IDCarritoCotizacion=" + id+ " and UserID='"+usuario+"'");

                return Json(true);
            }
            catch (Exception err)
            {
                return Json(500, err.Message);
            }
        }
        public ActionResult CreaReporteporfecha()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreaReporteporfecha(Reportefechas modelo)
        {
            ReportDocument reporte = new ReportDocument();

            reporte.Load(Path.Combine(Server.MapPath("~/reportes/Crystal/comercial"), "PEDIDOS.rpt"));

            string servidor = Conexion.Darvalordelaconexion("data source", "DefaultConnection");
            string basededatos = Conexion.Darvalordelaconexion("initial catalog", "DefaultConnection");
            string usuario = Conexion.Darvalordelaconexion("user id", "DefaultConnection");
            string pass = Conexion.Darvalordelaconexion("password", "DefaultConnection");


            reporte.DataSourceConnections[0].SetConnection(@servidor, basededatos, false);
            reporte.DataSourceConnections[0].SetLogon(usuario, pass);


            reporte.SetParameterValue("fechaini", modelo.Fechainicio.ToShortDateString());
            reporte.SetParameterValue("fechafin", modelo.Fechafinal.ToShortDateString());


            string ENCABEZADO = "Fecha inicial " + modelo.Fechainicio.ToShortDateString() + " Fecha final " + modelo.Fechafinal.ToShortDateString();

            reporte.DataDefinition.FormulaFields["Encabezado"].Text = "'" + ENCABEZADO + "'";
            reporte.DataDefinition.FormulaFields["Nota"].Text = "'" + modelo.Nota + "'";



            Response.Buffer = false;

            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = reporte.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf", "Reporte de Pedidos.pdf");

            }
            catch (Exception err)
            {
                string mensajedeerror = err.Message;
            }
            return Redirect("index");
        }

        public ActionResult CreaReporteporfechanombre()
        {
            //Buscar Cliente
            ClientesContext dbc = new ClientesContext();
            var cliente = dbc.Clientes.OrderBy(m => m.Nombre).ToList();
            List<SelectListItem> listaCliente = new List<SelectListItem>();
            listaCliente.Add(new SelectListItem { Text = "--Selecciona Cliente--", Value = "0" });

            foreach (var m in cliente)
            {
                listaCliente.Add(new SelectListItem { Text = m.Nombre, Value = m.IDCliente.ToString() });
            }
            ViewBag.cliente = listaCliente;
            return View();
        }

        [HttpPost]
        public ActionResult CreaReporteporfechanombre(Reportefeno modelo)
        {

            int idclie = modelo.IDCliente;
            ClientesContext dbc = new ClientesContext();
            Clientes cliente = dbc.Clientes.Find(modelo.IDCliente);

            ReportDocument reporte = new ReportDocument();

            reporte.Load(Path.Combine(Server.MapPath("~/reportes/Crystal/Comercial"), "PEDIDOS.rpt"));

            string servidor = Conexion.Darvalordelaconexion("data source", "DefaultConnection");
            string basededatos = Conexion.Darvalordelaconexion("initial catalog", "DefaultConnection");
            string usuario = Conexion.Darvalordelaconexion("user id", "DefaultConnection");
            string pass = Conexion.Darvalordelaconexion("password", "DefaultConnection");


            reporte.DataSourceConnections[0].SetConnection(@servidor, basededatos, false);
            reporte.DataSourceConnections[0].SetLogon(usuario, pass);

            reporte.DataDefinition.RecordSelectionFormula = "{EncPedido.Fecha}>={?fechaini} and { EncPedido.Fecha}<={?fechafin} and {Clientes.IDCliente} =" + modelo.IDCliente;

            reporte.SetParameterValue("fechaini", modelo.Fechainicio.ToShortDateString());
            reporte.SetParameterValue("fechafin", modelo.Fechafinal.ToShortDateString());



            string ENCABEZADO = "Fecha inicial " + modelo.Fechainicio.ToShortDateString() + " Fecha final " + modelo.Fechafinal.ToShortDateString() + " Cliente " + cliente.Nombre;

            reporte.DataDefinition.FormulaFields["Encabezado"].Text = "'" + ENCABEZADO + "'";
            reporte.DataDefinition.FormulaFields["Nota"].Text = "'" + modelo.Nota + "'";



            Response.Buffer = false;

            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = reporte.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf", "Reporte de Pedidos.pdf");

            }
            catch (Exception err)
            {
                string mensajedeerror = err.Message;
            }
            return Redirect("index");
        }

        public ActionResult CreaReporteporVendedor()
        {
            //Buscar Cliente
            VendedorContext dbc = new VendedorContext();
            var vendedor = dbc.Vendedores.OrderBy(m => m.Nombre).ToList();
            List<SelectListItem> listaVendedor = new List<SelectListItem>();
            listaVendedor.Add(new SelectListItem { Text = "--Selecciona Vendedor--", Value = "0" });

            foreach (var m in vendedor)
            {
                listaVendedor.Add(new SelectListItem { Text = m.Nombre, Value = m.IDVendedor.ToString() });
            }
            ViewBag.vendedor = listaVendedor;
            return View();
        }

        [HttpPost]
        public ActionResult CreaReporteporVendedor(Reportefeno modelo)
        {

            int idVendedor = modelo.IDVendedor;
            VendedorContext dbc = new VendedorContext();
            Vendedor vendedor = dbc.Vendedores.Find(modelo.IDVendedor);

            ReportDocument reporte = new ReportDocument();

            reporte.Load(Path.Combine(Server.MapPath("~/reportes/Crystal/Comercial"), "PedidoVendedor.rpt"));

            string servidor = Conexion.Darvalordelaconexion("data source", "DefaultConnection");
            string basededatos = Conexion.Darvalordelaconexion("initial catalog", "DefaultConnection");
            string usuario = Conexion.Darvalordelaconexion("user id", "DefaultConnection");
            string pass = Conexion.Darvalordelaconexion("password", "DefaultConnection");


            reporte.DataSourceConnections[0].SetConnection(@servidor, basededatos, false);
            reporte.DataSourceConnections[0].SetLogon(usuario, pass);

            reporte.DataDefinition.RecordSelectionFormula = "{EncPedido.Fecha}>={?fechaini} and { EncPedido.Fecha}<={?fechafin} and {Vendedor.IDVendedor} =" + modelo.IDVendedor;

            reporte.SetParameterValue("fechaini", modelo.Fechainicio.ToShortDateString());
            reporte.SetParameterValue("fechafin", modelo.Fechafinal.ToShortDateString());
            reporte.SetParameterValue("TC", modelo.TC);



            string ENCABEZADO = "Fecha inicial " + modelo.Fechainicio.ToShortDateString() + " Fecha final " + modelo.Fechafinal.ToShortDateString() + " Vendedor " + vendedor.Nombre;

            reporte.DataDefinition.FormulaFields["Encabezado"].Text = "'" + ENCABEZADO + "'";
            reporte.DataDefinition.FormulaFields["Nota"].Text = "'" + modelo.Nota + "'";



            Response.Buffer = false;

            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = reporte.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf", "Reporte de Pedidos por vendedor.pdf");

            }
            catch (Exception err)
            {
                string me = err.Message;
            }
            return Redirect("index");
        }

     public ActionResult PdfPedido(int id)
        {

            EncPedido pedido = new PedidoContext().EncPedidos.Find(id);
            DocumentoPedido x = new DocumentoPedido();

            x.claveMoneda = pedido.c_Moneda.Descripcion;
            x.descuento = 0;
            x.fecha = pedido.Fecha.ToShortDateString();
            x.fechaRequerida = pedido.FechaRequiere.ToShortDateString();
            x.Cliente = pedido.Clientes.Nombre;
            x.formaPago = pedido.c_FormaPago.ClaveFormaPago;
            x.metodoPago = pedido.c_MetodoPago.ClaveMetodoPago;
            x.RFCCliente = pedido.Clientes.RFC;
            x.TelefonoCliente = pedido.Clientes.Telefono;
            x.total = float.Parse(pedido.Total.ToString());
            x.subtotal = float.Parse(pedido.Subtotal.ToString());
            x.tipo_cambio = pedido.TipoCambio.ToString();
            x.serie = "";
            x.folio = pedido.IDPedido.ToString();
            x.UsodelCFDI = pedido.c_UsoCFDI.Descripcion;
            x.IDPedido = pedido.Almacen.IDAlmacen;
            x.Empresa = pedido.Almacen.Telefono;
            x.condicionesdepago = pedido.CondicionesPago.Descripcion;
            x.OCompra = pedido.OCompra;
            x.facturaexacto = pedido.Clientes.FacturacionExacta;
            x.RequiereCertificado = pedido.Clientes.CertificadoCalidad;
            x.Entrega = pedido.Entrega;
            x.Observacion = pedido.Observacion;
            x.Vendedor = pedido.Vendedor.Nombre;
            x.IDPedido = pedido.IDPedido;

            ImpuestoPedido iva = new ImpuestoPedido();
            iva.impuesto = "IVA";
            iva.tasa = 16;
            iva.importe = float.Parse(pedido.IVA.ToString());


            x.impuestos.Add(iva);

            EmpresaContext dbe = new EmpresaContext();

            var empresa = dbe.empresas.Single(m => m.IDEmpresa == 2);
            x.Empresa = empresa.RazonSocial;
            x.Telefono = empresa.Telefono;
            x.RFC = empresa.RFC;
            x.Direccion = empresa.Calle + " " + empresa.NoExt + " " + empresa.NoInt + "\n" + empresa.Colonia + " \n" + empresa.Municipio + "," + empresa.Estados.Estado;
            x.firmadefinanzas = empresa.Director_finanzas;
            x.firmadecompras = empresa.Persona_de_Compras + "";

            List<DetPedido> detalles = db.Database.SqlQuery<DetPedido>("select * from [dbo].[DetPedido] where IDPedido=" + id).ToList();

            int contador = 1;
            foreach (var item in detalles)
            {
                ProductoPedido producto = new ProductoPedido();
                Articulo arti = new ArticuloContext().Articulo.Find(item.IDArticulo);
				  Almacen alma = new AlmacenContext().Almacenes.Find(item.IDAlmacen);
               // c_ClaveProductoServicio claveprodsat = db.Database.SqlQuery<c_ClaveProductoServicio>("select c_ClaveProductoServicio.* from (Articulo inner join Familia on articulo.IDFamilia= Familia.IDFamilia) inner join c_ClaveProductoServicio on c_ClaveProductoServicio.IDProdServ= Familia.IDProdServ where Articulo.IDArticulo= " + item.IDArticulo).ToList()[0];
                producto.ClaveProducto = arti.Cref;
				producto.idarticulo = arti.IDArticulo;
                producto.c_unidad = arti.c_ClaveUnidad.ClaveUnidad;
                producto.cantidad = item.Cantidad.ToString();
                producto.descripcion = arti.Descripcion;
				producto.almacen = alma.CodAlm;
                producto.valorUnitario = float.Parse(item.Costo.ToString());
                producto.v_unitario = float.Parse(item.Costo.ToString());
                producto.importe = float.Parse(item.Importe.ToString());

                try
                {
                    ClsDatoEntero idorden = db.Database.SqlQuery<ClsDatoEntero>("select IDOrden as Dato from OrdenProduccion where IDPedido=" + item.IDDetPedido + "").ToList()[0];


                    producto.OProduccion = idorden.Dato;



                }
                catch (Exception E)
                {
                    string mensajedeerror = E.Message;
                }
                // para que aparezca el numero de presentacion en el pedido antes de la presentacion NP = numero de la presentacion
                Caracteristica caracteristica = new ArticuloContext().Database.SqlQuery<Caracteristica>("select * from Caracteristica where ID=" + item.Caracteristica_ID).FirstOrDefault();
                //
                producto.Presentacion = "NP "+ caracteristica.IDPresentacion + "  " + item.Presentacion; //item.presentacion;//item.presentacion;
                producto.Nota = item.Nota;
                ///
                producto.numIdentificacion = contador.ToString();
                contador++;

                x.productos.Add(producto);

            }

            System.Drawing.Image logoempresa = byteArrayToImage(empresa.Logo);

            //try
            //{


            CreaPedidoPDF documentop = new CreaPedidoPDF(logoempresa, x);

           // string contentType = System.Net.Mime.MediaTypeNames.Application.Pdf;
            //return new FilePathResult(documentop.nombreDocumento, contentType);

            //}
            //catch (Exception err)
            //{

            //}

         return   RedirectToAction("Index");

        }

        public System.Drawing.Image byteArrayToImage(byte[] byteArrayIn)
        {
            System.Drawing.Image returnImage = null;
            try
            {
                MemoryStream ms = new MemoryStream(byteArrayIn, 0, byteArrayIn.Length);
                ms.Write(byteArrayIn, 0, byteArrayIn.Length);
                returnImage = System.Drawing.Image.FromStream(ms, true);//Exception occurs here
            }
            catch { }
            return returnImage;

        }


    public string CrearOrden(int id, decimal cantidad, int ordenproduccion, decimal TC, int IDMoneda, int modelo) // cfreamos mensajes que devuelve la rutina
        {
    
        	
			string mensajeerror = string.Empty;

            ClsCotizador elemento = new ClsCotizador();
            Cotizaciones archivocotizacion = new ArchivoCotizadorContext().cotizaciones.Find(cotizacion);
            XmlDocument documento = new XmlDocument();
            string nombredearchivo = archivocotizacion.Ruta.TrimEnd() + "\\" + archivocotizacion.NombreArchivo + ".xml";
            documento.Load(nombredearchivo);
            elemento = null;
            XmlSerializer serializerX = new XmlSerializer(typeof(ClsCotizador));
            using (Stream reader = new FileStream(nombredearchivo, FileMode.Open))
            {
                // Call the Deserialize method to restore the object's state.
                elemento = (ClsCotizador)serializerX.Deserialize(reader);
            }
            elemento.Cantidad = cantidad;

            FormulaEspecializada.Formulaespecializada formula = new FormulaEspecializada.Formulaespecializada();
            formula = igualar(elemento, formula);

            formula.Calcular();

            elemento.CantidadMPMts2 = formula.CantidadMPMts2;
            elemento.anchomaterialenmm = formula.anchomaterialenmm;
            elemento.largomaterialenMts = formula.largomaterialenMts;
            elemento.CintasMaster = formula.CintasMaster;
            elemento.Numerodecintas = formula.Numerodecintas;
            elemento.MtsdeMerma = formula.MtsdeMerma;
            elemento.CostototalMP = formula.CostototalMP;

            elemento.HrPrensa = formula.getHoraPrensa();

            if (elemento.mangatermo)
            {
                elemento.HrSellado = formula.HrSellado;
                elemento.HrInspeccion = formula.HrInspeccion;
                elemento.HrCorte = formula.HrCorte;
            }
            else
            {
                elemento.HrEmbobinado = formula.getHoraEmbobinado();
            }


            Plantilla articulosdeplantilla = null;



            if (modelo == 4)
            {
                try
                {
                    articulosdeplantilla = Modelo4(elemento);
                }
                catch(Exception err)
                {
                    string mensajeerror1 = err.Message;
                }

                 


            }

            if (modelo == 8)
            {
                articulosdeplantilla = Modelo8( elemento);

            }

            foreach (ArticuloXML artipro in articulosdeplantilla.Articulos)
            {


                   FormulaSiaapi.Formulas formulaparasacarinfo = new FormulaSiaapi.Formulas();
                  
                    string forMU = artipro.Formula;


                    ArticuloContext basa = new ArticuloContext();
                  int idar = int.Parse(artipro.IDArticulo);
                    Articulo articulo = basa.Articulo.Find(idar);
               
                    Caracteristica caraarticulo = basa.Database.SqlQuery<Caracteristica>("select * from caracteristica where id=" + artipro.IDCaracteristica).FirstOrDefault();
                
                string formulanueva = forMU;
                try
                {
                     formulanueva = formulaparasacarinfo.sustituircontenidocadena(forMU, double.Parse(cantidad.ToString()));
                }
                catch(Exception err)
                {

                }
                if (artipro.FactorCierre == null)
                { artipro.FactorCierre = "0"; }    
                    double valorfin = formulaparasacarinfo.Calcular(formulanueva, double.Parse(artipro.FactorCierre.ToString()));
                
                //////////////////////checa el costo ///////////////////////

                    double costo = 0;
                    double costounitario = 0;
                        try
                        {
                            ClsDatoDecimal cuanto = new CobroContext().Database.SqlQuery<ClsDatoDecimal>("SELECT [dbo].[GetCosto] (" + articulo.IDArticulo + "," + valorfin + ") as Dato ").ToList()[0];
                            costo = double.Parse(cuanto.Dato.ToString());
                        }
                        catch (Exception err)
                        {
                           mensajeerror += err.Message;
                        }

                    string clavemonedacotizar = new c_MonedaContext().c_Monedas.Find(articulo.IDMoneda).ClaveMoneda;


                    decimal tcc = TC;
                    if (articulo.IDMoneda == IDMoneda)
                    {
                        tcc = 1;
                    }
                    costounitario = costo;
                    if (valorfin >= 0)
                    {
                        costo = costo * valorfin;
                    }


                    decimal costofinal = 0;



                    if (articulo.c_Moneda.ClaveMoneda == "MXN" && clavemonedacotizar == "USD")
                    {
                        costofinal = (decimal)costo / tcc;
                    }
                    if (articulo.c_Moneda.ClaveMoneda == "USD" && clavemonedacotizar == "MXN")
                    {
                        costofinal = (decimal)costo * tcc;
                    }
                    if (articulo.c_Moneda.ClaveMoneda == clavemonedacotizar)
                    {
                        costofinal = (decimal)costo;
                    }

                //  new CobroContext().Database.ExecuteSqlCommand("INSERT INTO [dbo].[RangoPlaneacionArticulo] ([IDHE],[RangoInf],[RangoSup],[Costo],[Version],[IDArticulo],[IDTipoArticulo],[IDMoneda],[IDProceso],[TC],cantidad) VALUES (" + hoja.IDHE + "," + rango.RangoInf + "," + rango.RangoSup + "," + costofinal + "," + hoja.Version + "," + articulo.IDArticulo + "," + articulo.IDTipoArticulo + "," + IDMoneda + "," + articulop.IDProceso + "," + tcc + "," + valorfin + ")");

                //Solicitando LDM
                costofinal = Math.Round(costofinal, 2);

                if ((articulo.IDTipoArticulo == 1) || (articulo.IDTipoArticulo == 4) || (articulo.IDTipoArticulo == 6) || (articulo.IDTipoArticulo == 7))
                {
                    StringBuilder cadenasolcitud = new StringBuilder();

                    cadenasolcitud.Append("insert into [DetSolicitud]([IDArticulo],[Caracteristica_ID],[IDAlmacen],[Documento],[Numero],[Cantidad],[Costo],[CantidadPedida],");
                    cadenasolcitud.Append("[Descuento],[Importe],[IVA],[ImporteIva],[ImporteTotal],[Nota],[Requerido],[Suministro],[Status],[DocumentoR],[NumeroDR],[Presentacion],[jsonPresentacion]) values (" );


                    cadenasolcitud.Append(artipro.IDArticulo + ",");
                    cadenasolcitud.Append(artipro.IDCaracteristica + ",");
                    Caracteristica caracterisp= null;
                    try
                    {
                         caracterisp = new ArticuloContext().Database.SqlQuery<Caracteristica>("select * from Caracteristica where ID=" + artipro.IDCaracteristica).ToList().FirstOrDefault();
                    }
                    catch(Exception err)
                    {
                        string mensajeerro = err.Message;
                    }

                   

                    switch (articulo.IDTipoArticulo)   /// de acurdo altipo de articulo es al almacen 
                    {
                        case 6:
                            cadenasolcitud.Append("6,"); // 
                            break;
                        case 7:
                            cadenasolcitud.Append("1,");
                            break;
                        default:
                            cadenasolcitud.Append("2,");
                            break;

                    }

                    cadenasolcitud.Append("'Orden de  Produccion',");
                    cadenasolcitud.Append(ordenproduccion + ",");
                    cadenasolcitud.Append(valorfin + ","); //PEDIDO
                    cadenasolcitud.Append(Math.Round((costofinal / decimal.Parse(valorfin.ToString())),2) + ",");
                    cadenasolcitud.Append("0,");
                    cadenasolcitud.Append("0,"); //descuento
                    cadenasolcitud.Append(costofinal+",");

                    cadenasolcitud.Append("'1',");
                    decimal ivaimp =Math.Round( costofinal * decimal.Parse(SIAAPI.Properties.Settings.Default.ValorIVA),2);
                    cadenasolcitud.Append(ivaimp + ",");
                    cadenasolcitud.Append(costofinal+ivaimp+",");
                    cadenasolcitud.Append("'',");
                    cadenasolcitud.Append("'0',");
                    cadenasolcitud.Append("0,"); //suministro
                    cadenasolcitud.Append("'Solicitado',"); //status
                    cadenasolcitud.Append("'',"); //documento
                    cadenasolcitud.Append("0,");
                    cadenasolcitud.Append("'" + caracterisp.Presentacion + "',");
                    cadenasolcitud.Append("'')");


                

                    try
                    {
                        db.Database.ExecuteSqlCommand(cadenasolcitud.ToString());
                    }
                    catch(Exception err)
                    {
                        string mensaje = err.Message;
                    }

                }

                try
                {
                    string existe = "'0'";
                    if ((articulo.IDTipoArticulo==3 || articulo.IDTipoArticulo==5)||(artipro.IDProceso=="3" || artipro.IDProceso=="7" || artipro.IDProceso=="10" || artipro.IDProceso=="11" || artipro.IDProceso == "12" || artipro.IDProceso == "16" || artipro.IDProceso == "4") )
                    {
                        existe = "'1'";
                    }
                    db.Database.ExecuteSqlCommand("INSERT INTO [dbo].[ArticuloProduccion]([IDHE],[IDArticulo],[IDTipoArticulo],[IDCaracteristica],[IDProceso],[IDOrden],[Cantidad],[IDClaveUnidad],[Indicaciones],[CostoPlaneado],[CostoReal],TC,TCR,[Existe]) VALUES('" + caraarticulo.IDCotizacion + "','" + articulo.IDArticulo + "','" + articulo.IDTipoArticulo + "','" + artipro.IDCaracteristica + "','" + artipro.IDProceso + "','" + ordenproduccion + "'," + valorfin + ",'" + articulo.IDClaveUnidad + "','" + artipro.Indicaciones + "'," + costofinal + ",0," + tcc + ",0," + existe +")");
                    /////   aqui vamos a traer el costo del articulo /////
                   
                }
                catch(Exception err)
                {
                    string mensaje = err.Message;
                }
                }
            // fin del for


            return mensajeerror;


        }


        public ActionResult EntreFechas()
        {
            return View();
        }

        [HttpPost]
        public ActionResult EntreFechas(ReportePedidosD modelo)
        {
            ReportePedidosD report = new ReportePedidosD();
            //byte[] abytes = report.PrepareReport(DateTime.Parse("2019-07-01"),DateTime.Parse( "2019-07-30"));
            byte[] abytes = report.PrepareReport(modelo.fechaini, modelo.fechafin);


            return File(abytes, "application/pdf");
            //return Redirect("index");
        }

        public ActionResult ReportePedidos()
        {
            return View();
        }

        [HttpPost]
        public ActionResult ReportePedidos(ReportePedidos modelo)
        {
            ReportePedidos report = new ReportePedidos();
            //byte[] abytes = report.PrepareReport(DateTime.Parse("2019-07-01"),DateTime.Parse( "2019-07-30"));
            byte[] abytes = report.PrepareReport(modelo.fechaini, modelo.fechafin);


            return File(abytes, "application/pdf");
            //return Redirect("index");
        }

        public ActionResult ReportePedidosCliente()
        {
            List<ClientesPedido> clientes = new List<ClientesPedido>();
            string cadena = "SELECT  distinct c.IDCliente, c.nombre as Nombre, c.Telefono , c.IDVendedor from clientes as c inner join encPedido as p on c.idcliente=p.idcliente where c.status='activo'";
            clientes = db.Database.SqlQuery<ClientesPedido>(cadena).ToList();
            List<SelectListItem> listacliente = new List<SelectListItem>();
            listacliente.Add(new SelectListItem { Text = "--Selecciona Cliente--", Value = "0" });

            foreach (var m in clientes)
            {
                listacliente.Add(new SelectListItem { Text = m.Nombre, Value = m.IDCliente.ToString() });
            }
            ViewBag.cliente = listacliente;
            return View();
        }

        [HttpPost]
        public ActionResult ReportePedidosCliente(ReportePeCliente modelo, ClientesPedido C)
        {
            int idcliente = C.IDCliente;
            try
            {

                ClientesContext dbc = new ClientesContext();
                Clientes cls = dbc.Clientes.Find(C.IDCliente);
            }
            catch (Exception ERR)
            {

            }

            ReportePeCliente report = new ReportePeCliente();
            //byte[] abytes = report.PrepareReport(DateTime.Parse("2019-07-01"), DateTime.Parse("2019-07-30"), idcliente);
            byte[] abytes = report.PrepareReport(modelo.fechaini, modelo.fechafin, idcliente);
            return File(abytes, "application/pdf");
            //return Redirect("index");
        }

        public ActionResult EntreFechasVen()
        {
            List<VendedorPe> vendedor = new List<VendedorPe>();
            string cadena = "select distinct v.IdVendedor, v.Nombre from vendedor as v inner join encpedido as e on v.idvendedor=e.IDVendedor";
            vendedor = db.Database.SqlQuery<VendedorPe>(cadena).ToList();
            List<SelectListItem> listavendedor = new List<SelectListItem>();
            listavendedor.Add(new SelectListItem { Text = "--Selecciona Vendedor--", Value = "0" });

            foreach (var m in vendedor)
            {
                listavendedor.Add(new SelectListItem { Text = m.Nombre, Value = m.IDVendedor.ToString() });
            }
            ViewBag.vendedor = listavendedor;
            return View();

        }

        [HttpPost]
        public ActionResult EntreFechasVen(ReportePedidosVendedor modelo, VendedorPe v)
        {
            int idvendedor = v.IDVendedor;
            try
            {

                VendedorContext dbc = new VendedorContext();
                Vendedor ven = dbc.Vendedores.Find(v.IDVendedor);
            }
            catch (Exception ERR)
            {

            }

            ReportePedidosVendedor report = new ReportePedidosVendedor();
            //byte[] abytes = report.PrepareReport(DateTime.Parse("2019-07-01"), DateTime.Parse("2019-07-30"), idcliente);
            byte[] abytes = report.PrepareReport(modelo.fechaini, modelo.fechafin, idvendedor);
            return File(abytes, "application/pdf");
            //return Redirect("index");
        }


        public ActionResult EntreFechasV()
        {
            return View();
        }

        [HttpPost]
        public ActionResult EntreFechasV(ReportePedidosDlsVen modelo)
        {
            ReportePedidosDlsVen report = new ReportePedidosDlsVen();
            //byte[] abytes = report.PrepareReport(DateTime.Parse("2019-07-01"),DateTime.Parse( "2019-07-30"));
            byte[] abytes = report.PrepareReport(modelo.fechaini, modelo.fechafin);
            return File(abytes, "application/pdf");
            //return Redirect("index");
        }
     
        public ActionResult EntreFechasPed()
        {
            EFecha elemento = new EFecha();

            return View(elemento);
        }

        [HttpPost]
        public ActionResult EntreFechasPed(EFecha modelo, FormCollection coleccion)
        {
            VPedidosContext dbe = new VPedidosContext();
            VPedidoDetContext dbr = new VPedidoDetContext();
            string FI = modelo.fechaini.Year.ToString() + "-" + modelo.fechaini.Month.ToString() + "-" + modelo.fechaini.Day.ToString();
            string FF = modelo.fechafin.Year.ToString() + "-" + modelo.fechafin.Month.ToString() + "-" + modelo.fechafin.Day.ToString();

            string cual = coleccion.Get("Enviar");

            string cadena = "";
            string cadenaDet = "";
            if (cual == "Generar reporte")
            {
                return View();
            }
            if (cual == "Generar excel")
            {

                cadena = "select * from dbo.VPedidos where fecha >= '" + FI + "' and fecha  <='" + FF + "' ";
                var datos = dbe.Database.SqlQuery<VPedidos>(cadena).ToList();
                ViewBag.datos = datos;
                cadenaDet = "select * from [dbo].[VPedidoDet] where Fecha >= '" + FI + "' and Fecha <='" + FF + "' ";
                var datosDet = dbr.Database.SqlQuery<VPedidoDet>(cadenaDet).ToList();
                ViewBag.datosDet = datosDet;

                ExcelPackage Ep = new ExcelPackage();
                //Crear la hoja y poner el nombre de la pestaña del libro
                var Sheet = Ep.Workbook.Worksheets.Add("Pedidos");

                // en la fila1 formateo las celdas y coloco el título de la hoja
                // RichText permite agregar las propiedades de tipo de letra: color, negrita, etc.
                int row = 1;
                //Fijar la fuente para A1:Q1
                Sheet.Cells["A1:U1"].Style.Font.Size = 20;
                Sheet.Cells["A1:U1"].Style.Font.Name = "Calibri";
                Sheet.Cells["A1:U3"].Style.Font.Bold = true;
                Sheet.Cells["A1:U1"].Style.Font.Color.SetColor(Color.DarkBlue);
                Sheet.Cells["A1:U1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                Sheet.Cells["A1"].RichText.Add("Listado de Pedidos");

                row = 2;
                Sheet.Cells["A1:U1"].Style.Font.Size = 12;
                Sheet.Cells["A1:U1"].Style.Font.Name = "Calibri";
                Sheet.Cells["A1:U1"].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                Sheet.Cells["A2:U2"].Style.Font.Bold = true;
                //Subtitulo según el filtrado del periodo de datos
                row = 2;
                Sheet.Cells[string.Format("A2", row)].Value = "Fecha inicial";
                Sheet.Cells[string.Format("B2", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                Sheet.Cells[string.Format("B2", row)].Value = FI;
                Sheet.Cells[string.Format("D2", row)].Value = "Fecha Final";
                Sheet.Cells[string.Format("E2", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                Sheet.Cells[string.Format("E2", row)].Value = FF;
                //En la fila3 se da el formato a el encabezado
                row = 3;
                Sheet.Cells.Style.Font.Name = "Calibri";
                Sheet.Cells.Style.Font.Size = 10;
                Sheet.Cells["A3:V3"].Style.Font.Bold = true;
                Sheet.Cells["A3:V3"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                Sheet.Cells["A3:V3"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);

                // Se establece el nombre que identifica a cada una de las columnas de datos.
                Sheet.Cells["A3"].RichText.Add("ID Pedido");
                Sheet.Cells["B3"].RichText.Add("Orden Compra Cliente");
                Sheet.Cells["C3"].RichText.Add("Fecha");
                Sheet.Cells["D3"].RichText.Add("Fecha Requiere");
                Sheet.Cells["E3"].RichText.Add("ID Cliente");
                //Sheet.Cells["E3"].RichText.Add("NoExpediente");
                Sheet.Cells["F3"].RichText.Add("RFC");
                Sheet.Cells["G3"].RichText.Add("Cliente");
                Sheet.Cells["H3"].RichText.Add("Subtotal");
                Sheet.Cells["I3"].RichText.Add("IVA");
                Sheet.Cells["J3"].RichText.Add("Total");
                Sheet.Cells["K3"].RichText.Add("Moneda");
                Sheet.Cells["L3"].RichText.Add("Tipo de Cambio");
                Sheet.Cells["M3"].RichText.Add("Total en Pesos");
                Sheet.Cells["N3"].RichText.Add("Status");
                Sheet.Cells["O3"].RichText.Add("Condiciones de Pago");
                Sheet.Cells["P3"].RichText.Add("Forma de Pago");
                Sheet.Cells["Q3"].RichText.Add("Método de Pago");
                Sheet.Cells["R3"].RichText.Add("Uso CFDI");
                Sheet.Cells["S3"].RichText.Add("Vendedor");
                Sheet.Cells["T3"].RichText.Add("Oficina");
                Sheet.Cells["U3"].RichText.Add("Observación");
                Sheet.Cells["V3"].RichText.Add("Entrega");


                //Aplicar borde doble al rango de celdas A3:Q3
                Sheet.Cells["A3:U3"].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                // en la fila4, el foreach llenara cada fila de la hoja de excel, con cada fila que trae de la bd.
                // Se establecen los formatos para las celdas: Fecha, Moneda
                row = 4;
                Sheet.Cells.Style.Font.Bold = false;
                foreach (VPedidos item in ViewBag.datos)
                {
                    Sheet.Cells[string.Format("A{0}", row)].Value = item.IDPedido;
                    Sheet.Cells[string.Format("B{0}", row)].Value = item.OCompra;
                    Sheet.Cells[string.Format("C{0}", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                    Sheet.Cells[string.Format("C{0}", row)].Value = item.Fecha;
                    Sheet.Cells[string.Format("D{0}", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                    Sheet.Cells[string.Format("D{0}", row)].Value = item.FechaRequiere;
                    Sheet.Cells[string.Format("E{0}", row)].Value = item.IDCliente;
                    //Sheet.Cells[string.Format("E{0}", row)].Value = item.noExpediente;
                    Sheet.Cells[string.Format("F{0}", row)].Value = item.RFC;
                    Sheet.Cells[string.Format("G{0}", row)].Value = item.Cliente;
                    Sheet.Cells[string.Format("H{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("H{0}", row)].Value = item.Subtotal;
                    Sheet.Cells[string.Format("I{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("I{0}", row)].Value = item.IVA;
                    Sheet.Cells[string.Format("J{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("J{0}", row)].Value = item.Total;
                    Sheet.Cells[string.Format("K{0}", row)].Value = item.ClaveMoneda;
                    Sheet.Cells[string.Format("L{0}", row)].Value = item.TipoCambio;
                    Sheet.Cells[string.Format("M{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("M{0}", row)].Value = item.TotalPesos;
                    Sheet.Cells[string.Format("N{0}", row)].Value = item.Status;
                    Sheet.Cells[string.Format("O{0}", row)].Value = item.CondicionesPago;
                    Sheet.Cells[string.Format("P{0}", row)].Value = item.FormaPago;
                    Sheet.Cells[string.Format("Q{0}", row)].Value = item.MetodoPago;
                    Sheet.Cells[string.Format("R{0}", row)].Value = item.UsoCFDI;
                    Sheet.Cells[string.Format("S{0}", row)].Value = item.Nombre;
                    Sheet.Cells[string.Format("T{0}", row)].Value = item.NombreOficina;
                    Sheet.Cells[string.Format("U{0}", row)].Value = item.Observacion;
                    Sheet.Cells[string.Format("V{0}", row)].Value = item.Entrega;

                    row++;
                }

                //Hoja No. 2
                Sheet = Ep.Workbook.Worksheets.Add("Detalles");
                row = 1;
                //Fijar la fuente para A1:Q1
                Sheet.Cells["A1:R1"].Style.Font.Size = 20;
                Sheet.Cells["A1:R1"].Style.Font.Name = "Calibri";
                Sheet.Cells["A1:R3"].Style.Font.Bold = true;
                Sheet.Cells["A1:R1"].Style.Font.Color.SetColor(Color.DarkBlue);
                Sheet.Cells["A1:R1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;
                Sheet.Cells["A1"].RichText.Add("Detalle de Pedidos");

                row = 2;
                Sheet.Cells["A1:R1"].Style.Font.Size = 12;
                Sheet.Cells["A1:R1"].Style.Font.Name = "Calibri";
                Sheet.Cells["A1:R1"].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                Sheet.Cells["A2:R2"].Style.Font.Bold = true;
                //Subtitulo según el filtrado del periodo de datos
                row = 2;
                Sheet.Cells[string.Format("A2", row)].Value = "Fecha inicial";
                Sheet.Cells[string.Format("B2", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                Sheet.Cells[string.Format("B2", row)].Value = FI;
                Sheet.Cells[string.Format("D2", row)].Value = "Fecha Final";
                Sheet.Cells[string.Format("E2", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                Sheet.Cells[string.Format("E2", row)].Value = FF;
                //En la fila3 se da el formato a el encabezado
                row = 3;
                Sheet.Cells.Style.Font.Name = "Calibri";
                Sheet.Cells.Style.Font.Size = 10;
                Sheet.Cells["A3:R3"].Style.Font.Bold = true;
                Sheet.Cells["A3:R3"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                Sheet.Cells["A3:R3"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);

                // Se establece el nombre que identifica a cada una de las columnas de datos.
                Sheet.Cells["A3"].RichText.Add("ID Detalle");
                Sheet.Cells["B3"].RichText.Add("ID Pedido");
                Sheet.Cells["C3"].RichText.Add("ID Remision");
                Sheet.Cells["D3"].RichText.Add("ID Prefactura");
                Sheet.Cells["E3"].RichText.Add("Fecha"); ;
                Sheet.Cells["F3"].RichText.Add("Cliente");
                Sheet.Cells["G3"].RichText.Add("Clave");
                Sheet.Cells["H3"].RichText.Add("Artículo");
                Sheet.Cells["I3"].RichText.Add("Presentación");
                Sheet.Cells["J3"].RichText.Add("Cantidad Pedida");
                Sheet.Cells["K3"].RichText.Add("Cantidad");
                Sheet.Cells["L3"].RichText.Add("Costo");
                Sheet.Cells["M3"].RichText.Add("Devolución");
                Sheet.Cells["N3"].RichText.Add("Importe");
                Sheet.Cells["O3"].RichText.Add("IVA");
                Sheet.Cells["P3"].RichText.Add("Total");
                Sheet.Cells["Q3"].RichText.Add("Estado");
                Sheet.Cells["R3"].RichText.Add("Nota");
                //Aplicar borde doble al rango de celdas A3:Q3
                Sheet.Cells["A3:R3"].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                // en la fila4, el foreach llenara cada fila de la hoja de excel, con cada fila que trae de la bd.
                // Se establecen los formatos para las celdas: Fecha, Moneda
                row = 4;
                Sheet.Cells.Style.Font.Bold = false;
                foreach (VPedidoDet itemD in ViewBag.datosDet)
                {

                    Sheet.Cells[string.Format("A{0}", row)].Value = itemD.IDDetPedido;
                    Sheet.Cells[string.Format("B{0}", row)].Value = itemD.IDPedido;
                    Sheet.Cells[string.Format("C{0}", row)].Value = itemD.IDRemision;
                    Sheet.Cells[string.Format("D{0}", row)].Value = itemD.IDPrefactura;
                    Sheet.Cells[string.Format("E{0}", row)].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                    Sheet.Cells[string.Format("E{0}", row)].Value = itemD.Fecha;
                    Sheet.Cells[string.Format("F{0}", row)].Value = itemD.Cliente;
                    Sheet.Cells[string.Format("G{0}", row)].Value = itemD.Cref;
                    Sheet.Cells[string.Format("H{0}", row)].Value = itemD.Articulo;
                    Sheet.Cells[string.Format("I{0}", row)].Value = itemD.Presentacion;
                    Sheet.Cells[string.Format("J{0}", row)].Value = itemD.CantidadPedida;
                    Sheet.Cells[string.Format("K{0}", row)].Style.Numberformat.Format = "0.0000";
                    Sheet.Cells[string.Format("K{0}", row)].Value = itemD.Cantidad;
                    Sheet.Cells[string.Format("L{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("L{0}", row)].Value = itemD.Costo;
                    Sheet.Cells[string.Format("M{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("M{0}", row)].Value = itemD.Descuento;
                    Sheet.Cells[string.Format("N{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("N{0}", row)].Value = itemD.Importe;
                    Sheet.Cells[string.Format("O{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("O{0}", row)].Value = itemD.ImporteIva;
                    Sheet.Cells[string.Format("P{0}", row)].Style.Numberformat.Format = "$#,##0.00";
                    Sheet.Cells[string.Format("P{0}", row)].Value = itemD.ImporteTotal;
                    Sheet.Cells[string.Format("Q{0}", row)].Value = itemD.Status;
                    Sheet.Cells[string.Format("R{0}", row)].Value = itemD.Nota;

                    row++;
                }
                //Se genera el archivo y se descarga

                Sheet.Cells["A:AZ"].AutoFitColumns();
                Response.Clear();
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment: filename=" + "Pedido.xlsx");
                Response.BinaryWrite(Ep.GetAsByteArray());
                Response.End();
                return Redirect("/blah");
            }
            return Redirect("index");
        }

        public ActionResult SubirArchivoPed(int id)
        {
            ViewBag.ID = id;
            return View();
        }

        [HttpPost]
        public ActionResult SubirArchivoPed(HttpPostedFileBase file, int id)
        {
            int idP = int.Parse(id.ToString());
            SubirArchivosModelo modelo = new SubirArchivosModelo();
            if (file != null)
            {
                string ruta = Server.MapPath("~/PDFPedidoAdd/");
                ruta += "Ped_" + id + "_" + file.FileName;
                string cad = "insert into  [dbo].[PedidoAdd]([IDPedido], [RutaArchivo], nombreArchivo) Values (" + idP + ", '" + ruta + "','" + "Ped_" + id + "_" + file.FileName + "' )";
                new PedidoAddContext().Database.ExecuteSqlCommand(cad);
                modelo.SubirArchivo(ruta, file);
                ViewBag.Error = modelo.error;
                ViewBag.Correcto = modelo.Confirmacion;
            }
            return RedirectToAction("index", new { searchString = id });
        }

        public ActionResult DescargarPDFPed(int id)
        {
            // Obtener contenido del archivo
            PedidoAddContext dbp = new PedidoAddContext();
            PedidoAdd elemento = dbp.PedidoAdd.Find(id);
            string contentType = System.Net.Mime.MediaTypeNames.Application.Pdf;
            return new FilePathResult(elemento.RutaArchivo.ToString(), contentType);
        }

        public ActionResult EliminarArchivoPed(int id)
        {
            PedidoAddContext dbp = new PedidoAddContext();
            string cadena = "select * from dbo.PedidoAdd where IDPedido= " + id + "";
            var datos = dbp.Database.SqlQuery<PedidoAdd>(cadena).ToList();
            ViewBag.datos = datos;
            return View(datos);
        }


        public ActionResult EliminarArchivo(int id, PedidoAdd mod)
        {

            PedidoAddContext db = new PedidoAddContext();
            List<SelectListItem> docto = new List<SelectListItem>();
            ClsDatoEntero contard = db.Database.SqlQuery<ClsDatoEntero>("select count(ID) as dato from dbo.PedidoAdd where ID= " + id + "").ToList().FirstOrDefault();
            int pedido = 0;
            if (contard.Dato != 0)
            {
                var elemento = db.PedidoAdd.Single(m => m.ID == id);
                pedido = elemento.IDPedido;

                string cad = "delete from dbo.PedidoAdd where ID= " + elemento.ID + "";
                new PedidoAddContext().Database.ExecuteSqlCommand(cad);

            }

            return RedirectToAction("index", new { searchString = pedido });
        }

    }
}