@model SIAAPI.Models.CartaPorte.ParqueVehicular

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>Editar Parque Vehicular</h3>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IDParqueV)
        @Html.HiddenFor(model => model.ClavePermisoSCT)
        @Html.HiddenFor(model => model.ClaveVehiculo)
        @Html.HiddenFor(model => model.ClaveRemolque)

        <div class="row">
            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.IDPermisoSCT, "ID Permiso SCT", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.IDPermisoSCT, ViewBag.IDPermisoSCT as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IDPermisoSCT, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.NoPermisoSCT, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NoPermisoSCT, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NoPermisoSCT, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.Aseguradora, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Aseguradora, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Aseguradora, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.PolizaSeguro, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PolizaSeguro, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PolizaSeguro, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.IDVehiculo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.IDVehiculo, ViewBag.IDVehiculo as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IDVehiculo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.PlacaVehiculo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PlacaVehiculo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PlacaVehiculo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-2 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.AnnoVehiculo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AnnoVehiculo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AnnoVehiculo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col col-md-4 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.Modelo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Modelo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Modelo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-4 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.IDRemolque, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.IDRemolque, ViewBag.IDRemolque as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IDRemolque, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.Placa, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Placa, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Placa, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.EsArrendado, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("EsArrendado", ViewBag.EsArrendado as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EsArrendado, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.IDArrendatario, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("IDArrendatario", ViewBag.EsArrendado as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IDArrendatario, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.TienePropietario, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.DropDownList("TienePropietario", ViewBag.TienePropietario as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TienePropietario, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col col-md-6 col-sm-1">
                <div class="form-group">
                    @Html.LabelFor(model => model.IDPropietario, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("IDPropietario", ViewBag.EsArrendado as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IDPropietario, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Grabar" class="btn btn-success btn-xs" />
                @Html.ActionLink("Regresar a la lista", "Index", null, new { @class = "btn btn-default btn-xs" })
            </div>
        </div>
    </div>
}


<h3>Detalle Parque Vehicular</h3>
<table class="table">
    <tr>
        <th>
            Tipo Permiso SCT
        </th>
        <th>
            Clave Permiso SCT
        </th>
        <th>
            No. Permiso SCT
        </th>
        <th>
            Aseguradora
        </th>
        <th>
            Póliza de Seguro
        </th>
        <th>
            Tipo Vehículo
        </th>
        <th>
            Clave Vehículo
        </th>
        <th>
            Placa Vehículo
        </th>
        <th>
            Año Vehículo
        </th>
        <th>
            Modelo
        </th>
        <th>
            Color
        </th>
        <th>
            Tipo Remolque
        </th>
        <th>
            Clave Remolque
        </th>
        <th>
            Placa
        </th>
    </tr>

    @foreach (SIAAPI.Models.CartaPorte.ParqueVehicular item in ViewBag.parque)
    {

        SIAAPI.Models.CartaPorte.c_TipoPermiso permiso = new SIAAPI.Models.CartaPorte.c_TipoPermisoContext().permiso.Find(item.IDPermisoSCT);
        SIAAPI.Models.CartaPorte.c_ConfigAutotransporte vehiculo = new SIAAPI.Models.CartaPorte.c_ConfigAutotransporteDBContext().ConfigAutotransporte.Find(item.IDVehiculo);
        SIAAPI.Models.CartaPorte.c_SubTipoRem remolque = new SIAAPI.Models.CartaPorte.c_SubTipoRemContext().TipoRem.Find(item.IDRemolque);

        <tr>
            <td>
               @permiso.Descripcion 
            </td>
            <td>
                @item.ClavePermisoSCT
            </td>
            <td>
                @item.NoPermisoSCT
            </td>
            <td>
                @item.Aseguradora
            </td>
            <td>
                @item.PolizaSeguro
            </td>
            <td>
                @vehiculo.Descripcion
            </td>
            <th>
                @item.ClaveVehiculo
            </th>
            <th>
                @item.PlacaVehiculo
            </th>
            <th>
                @item.AnnoVehiculo
            </th>
            <th>
                @item.Modelo
            </th>
            <th>
                @item.Color
            </th>
            <th>
                @remolque.RemoSemi 
            </th>
            <th>
                @item.ClaveRemolque
            </th>
            <th>
                @item.Placa
            </th>
        </tr>
    }
</table>